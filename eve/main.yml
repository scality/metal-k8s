version: "0.2"

branches:
  default:
    stage: "pre-merge"

stages:
  pre-merge:
    worker:
      type: local
    steps:
    - TriggerStages:
        name: Docs and syntax checker
        haltOnFailure: true
        stage_names:
        - build-doc
        - pep8
    - TriggerStages:
        name: trigger all the tests
        haltOnFailure: true
        stage_names:
        - single-node
        - single-node-upgrade-1.0
        - multi-node-test

  single-node:
    worker: &openstack
      type: openstack
      image: CentOS 7 (PVHVM)
      flavor: io1-30
      path: eve/workers/centos7_tests
    steps:
    - Git: &git_pull
        name: git pull
        repourl: "%(prop:git_reference)s"
        mode: full
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: 'Init node'
        haltOnFailure: true
        command: |-
          sudo bash eve/tests/single-node/init.sh
    - ShellCommand:
        name: 'Run the install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          tox -e tests -- install -s
        env:
          ANSIBLE_INVENTORY: eve/tests/single-node/inventory/hosts
    - ShellCommand:
        name: 'Run the post-install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          tox -e tests -- post -s --run-services
        env:
          ANSIBLE_INVENTORY: eve/tests/single-node/inventory/hosts

  single-node-upgrade-1.0:
    worker: *openstack
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: 'Init node'
        haltOnFailure: true
        command: |-
          sudo bash eve/tests/single-node/init.sh
    - ShellCommand:
        name: 'Run the install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          tox -e tests -- install -s -k upgrade
        env:
          ANSIBLE_INVENTORY: eve/tests/single-node/inventory/hosts
    - ShellCommand:
        name: 'Run the post-install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          tox -e tests -- post -s --run-services
        env:
          ANSIBLE_INVENTORY: eve/tests/single-node/inventory/hosts

  multi-node-test:
    worker:
      type: openstack
      image: CentOS 7 (PVHVM)
      flavor: general1-4
      path: eve/workers/centos7_terraform
      resources:
        vcpus: 60
        memory: 120G
        storage: 200G
        block_storage: 1000G
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: "Init terraform"
        command: "terraform init"
        workdir: "build/contrib/terraform/openstack"
    - ShellCommand:
        name: "Spawn openstack virtual infra"
        command: 'terraform apply -auto-approve'
        workdir: "build/contrib/terraform/openstack"
        env: &terraform_spawn_1
          OS_AUTH_URL: "%(secret:scality_cloud_auth_url)s"
          OS_REGION_NAME: "%(secret:scality_cloud_region)s"
          OS_USERNAME: "%(secret:scality_cloud_username)s"
          OS_PASSWORD: "%(secret:scality_cloud_password)s"
          OS_TENANT_NAME: "%(secret:scality_cloud_tenant_name)s"
          TF_VAR_ssh_key_path: "~/.ssh/terraform.pub"
          TF_VAR_name_prefix: "%(prop:worker_uuid)s"
          TF_VAR_ssh_key_name: "%(prop:worker_uuid)s"
          TF_VAR_etcd_dedicated: "0"
    - ShellCommand:
        name: 'Run the install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          ANSIBLE_INVENTORY=$(cd ${TF_DIR}; terraform output inventory_file) \
          tox -e tests -- install -s
        env: &terraform_run_test_1
          TF_DIR: "contrib/terraform/openstack"
          ANSIBLE_PRIVATE_KEY_FILE: ~/.ssh/terraform
          ANSIBLE_HOST_KEY_CHECKING: "false"
    - ShellCommand:
        name: 'Run the post-install test suite'
        haltOnFailure: true
        usePTY: true
        command: |-
          ANSIBLE_INVENTORY=$(cd ${TF_DIR}; terraform output inventory_file) \
          tox -e tests -- post -s --run-services
        env: *terraform_run_test_1
    - ShellCommand:
        name: "Destroy openstack virtual infra"
        workdir: "build/contrib/terraform/openstack"
        command: |-
          for _ in $(seq 1 3); do
             terraform destroy -auto-approve && break
          done;
        alwaysRun: true
        env: *terraform_spawn_1


  build-doc:
    worker:
      type: kube_pod
      path: eve/workers/doc-builder.yaml
      images:
        doc-builder:
          context: '.'
          dockerfile: docs/Dockerfile
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: 'Build doc'
        haltOnFailure: true
        command: tox --workdir /tmp/tox -e docs -- html latexpdf
        env:
          # Fake we're building in a ReadTheDocs environment
          READTHEDOCS: 'True'

  pep8:
    worker:
      type: kube_pod
      path: eve/workers/pep8.yaml
      images:
        pep8-checker:
          context: '.'
          dockerfile: eve/images/pep8-checker/Dockerfile
    steps:
    - Git: *git_pull
    - ShellCommand:
        name: 'Check syntax'
        haltOnFailure: true
        command: tox --workdir /var/tmp/tox -e pep8
