---
version: "0.2"

branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*:
    stage: pre-merge

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Trigger build, docs and lint stages simultaneously
          stage_names:
            - build
            - buildprev
            - docs
            - lint
          haltOnFailure: true
      - SetPropertyFromCommand:
          name: Set version as property from built artifacts
          property: metalk8s_version
          command: >
            bash -c '
            . <(curl -s "%(prop:artifacts_private_url)s/product.txt") &&
            echo $VERSION'
      - TriggerStages:
          name: Trigger single-node and multiple-nodes steps with built ISO
          stage_names:
            - single-node-upgrade-test
            - single-node-downgrade-test
            - multiple-nodes

  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
      - ShellCommand:
          name: Wait for Docker daemon to be ready
          command: |
            bash -c '
            for i in {1..150}
            do
              docker info &> /dev/null && exit
              sleep 2
            done
            echo "Could not reach Docker daemon from buildbot worker" >&2
            exit 1'
          haltOnFailure: true
      - Git: &git_pull
          name: git pull
          repourl: "%(prop:git_reference)s"
          method: clobber
          retryFetch: true
          haltOnFailure: true
      - ShellCommand:
          name: build everything
          env:
            PYTHON_SYS: python3.6
          # There are 3 CPUs available for Docker, and 1 for `doit` in the Pod.
          # Given the network IO-bound nature of some of the build steps, and
          # most build steps running in Docker, set concurrency to 4.
          command: ./doit.sh -n 4
          usePTY: true
      - ShellCommand:
          name: Put the iso file in a separate folder
          command: >
            mkdir iso &&
            cp _build/metalk8s.iso _build/SHA256SUM _build/root/product.txt iso
      - Upload:
          name: upload artifacts
          source: iso/
          urls:
            - "*.iso"
            - SHA256SUM
            - product.txt

  buildprev:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
      - ShellCommand:
          name: Wait for Docker daemon to be ready
          command: |
            bash -c '
            for i in {1..150}
            do
              docker info &> /dev/null && exit
              sleep 2
            done
            echo "Could not reach Docker daemon from buildbot worker" >&2
            exit 1'
          haltOnFailure: true
      - SetPropertyFromCommand: &product_version_prev
          name: set product_version_prev
          property: product_version_prev
          command: >
              major=$(echo "%(prop:product_version)s" | cut -d'.' -f1) &&
              minor=$(echo "%(prop:product_version)s" | cut -d'.' -f2) &&
              echo "$major.$(( $minor-1 ))"
      - ShellCommand:
          name: clone previous version branch
          command: >
              git clone "%(prop:repository)s" \
                  --branch "development/%(prop:product_version_prev)s" \
                  metalk8s-"%(prop:product_version_prev)s"
      - SetPropertyFromCommand:
          name: set product_full_version
          property: product_full_version
          command: >
              bash -c '
              source metalk8s-%(prop:product_version_prev)s/VERSION &&
              echo %(prop:product_version_prev)s.$VERSION_PATCH$VERSION_SUFFIX'
      - ShellCommand:
          name: build everything
          env:
            PYTHON_SYS: python3.6
          # There are 3 CPUs available for Docker, and 1 for `doit` in the Pod.
          # Given the network IO-bound nature of some of the build steps, and
          # most build steps running in Docker, set concurrency to 4.
          command: cd metalk8s-%(prop:product_version_prev)s && ./doit.sh -n 4
          usePTY: true
      - ShellCommand:
          name: Put the iso file in a separate folder
          command: >
            mkdir iso/pre -p &&
            cp metalk8s-%(prop:product_version_prev)s/_build/metalk8s.iso \
              iso/pre/metalk8s-%(prop:product_full_version)s.iso &&
            cp metalk8s-%(prop:product_version_prev)s/_build/SHA256SUM \
              iso/pre/SHA256SUM-%(prop:product_full_version)s &&
            cp metalk8s-%(prop:product_version_prev)s/_build/root/product.txt \
              iso/pre/product-%(prop:product_full_version)s.txt
      - Upload:
          name: upload artifacts
          source: iso/

  docs:
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: '.'
          dockerfile: docs/Dockerfile
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Build documentation
          env:
            # Fake that we are building in a ReadTheDocs environment
            READTHEDOCS: 'True'
          command: tox --workdir /tmp/tox -e docs -- html latexpdf
          haltOnFailure: true
      - Upload:
          name: Upload documentation artifacts
          source: docs/_build
          urls:
            - ['docs/\1', '*']

  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Run all linting targets
          command: ./doit.sh lint
          usePTY: true
          haltOnFailure: false

  single-node-downgrade-test:
    worker:
      type: openstack
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
      path: eve/workers/openstack-single-node
    steps:
      - Git: *git_pull
      - SetPropertyFromCommand:
          name: Set previous version
          property: metalk8s_prev_version
          command: >
            bash -c '
              source VERSION &&
              VERSION_MINOR=$((VERSION_MINOR-1))
            echo $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX'
      - ShellCommand: &ssh_ip_setup
          name: Report IP and install SSH keys
          command: >
            ip a &&
            mkdir -p ~/.ssh &&
            echo "%(secret:ssh_pub_keys)s" >> ~/.ssh/authorized_keys
      - ShellCommand: &retrieve_iso
          name: Retrieve ISO version N image
          command: >
            curl -s -XGET -o metalk8s.iso
            "%(prop:artifacts_private_url)s/metalk8s.iso"
          haltOnFailure: true
      - ShellCommand: &retrieve_iso_checksum
          name: Retrieve ISO image checksum
          command: >
            curl -s -XGET -o SHA256SUM
            "%(prop:artifacts_private_url)s/SHA256SUM"
          haltOnFailure: true
      - ShellCommand: &check_iso_checksum
          name: Check image with checksum
          command: sha256sum -c SHA256SUM
          haltOnFailure: true
      - ShellCommand:
          name: Retrieve ISO version N-1 image
          command: >
            isourl="/pre/metalk8s-%(prop:metalk8s_prev_version)s.iso";
            curl -s -XGET -o /tmp/metalk8s.iso
            "%(prop:artifacts_private_url)s$isourl"
          haltOnFailure: true
      - ShellCommand:
          name: Retrieve ISO N-1 image checksum
          command: >
            shasumurl="/pre/SHA256SUM-%(prop:metalk8s_prev_version)s";
            curl -s -XGET -o /tmp/SHA256SUM
            "%(prop:artifacts_private_url)s$shasumurl"
          haltOnFailure: true
      - ShellCommand:
          name: Check N-1 image with checksum
          command: cd /tmp && sha256sum -c SHA256SUM
          haltOnFailure: true
      - ShellCommand:
          name: Create mountpoint
          command: >
            sudo mkdir -p /srv/scality/metalk8s-%(prop:metalk8s_version)s
      - ShellCommand:
          name: Mount ISO image
          command: >
            sudo mount -o loop metalk8s.iso
            /srv/scality/metalk8s-%(prop:metalk8s_version)s
          haltOnFailure: true
      - ShellCommand:
          name: Create bootstrap configuration file
          command: |
            sudo bash << EOF
            mkdir -p /etc/metalk8s
            cat > /etc/metalk8s/bootstrap.yaml << END
            apiVersion: metalk8s.scality.com/v1alpha2
            kind: BootstrapConfiguration
            networks:
              controlPlane: 10.100.0.0/16
              workloadPlane: 10.100.0.0/16
            ca:
              minion: $(hostname)
            apiServer:
              host: $(ip route get 10.100.0.0 | awk '/10.100.0.0/{ print $6 }')
            archives:
              - /srv/scality/metalk8s-%(prop:metalk8s_version)s
            END
            EOF
      - ShellCommand:
          name: Start the bootstrap process
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/bootstrap.sh
            --verbose
          haltOnFailure: true
      - ShellCommand:
          name: Run tests locally
          env:
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:metalk8s_version)s
          command: >
            tox -e tests-local --
            -m "post and ci and not multinode and not slow" &&
            tox -e tests-local --
            -m "post and ci and not multinode and slow"
          haltOnFailure: true
      - ShellCommand:
          name: Run downgrade
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/iso-manager.sh
            --archive /tmp/metalk8s.iso &&
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/downgrade.sh
            --destination-version %(prop:metalk8s_prev_version)s
          haltOnFailure: true
      - ShellCommand: &collect_sosreport
          name: Collect logs using sosreport
          command: >
            sudo sosreport --all-logs
            -o metalk8s -kmetalk8s.podlogs=True
            -o containerd -kcontainerd.all=True -kcontainerd.logs=True
            --batch --tmp-dir /var/tmp &&
            sudo chown eve:eve /var/tmp/sosreport*
          alwaysRun: true
      - ShellCommand:
          name: Copy sosreport to correct directory structure
          command: >
            mkdir -p sosreport/sosreport/single-node &&
            cp /var/tmp/sosreport* sosreport/sosreport/single-node
          alwaysRun: true
      - Upload: &upload_report_artifact
          name: upload artifacts
          source: sosreport
          alwaysRun: true
      - ShellCommand:
          name: Debug step - wait 1 hour before allowing resource destruction
          timeout: 3600
          command: sleep 3600
          doStepIf: false
          alwaysRun: true

  single-node-upgrade-test:
    worker:
      type: openstack
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
      path: eve/workers/openstack-single-node
    steps:
      - Git: *git_pull
      - ShellCommand: *ssh_ip_setup
      - SetPropertyFromCommand: *product_version_prev
      - SetPropertyFromCommand: &set_prev_version
          name: Set previous version
          property: metalk8s_prev_version
          command: >
            bash -c '
              git checkout development/%(prop:product_version_prev)s --quiet &&
              source VERSION ;
              echo $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX'
      - ShellCommand: &get_prev_iso
          name: Get %(prop:metalk8s_prev_version)s image
          command: >
            isourl="/pre/metalk8s-%(prop:metalk8s_prev_version)s.iso";
            curl -s -XGET -o /tmp/metalk8s.iso
            "%(prop:artifacts_private_url)s$isourl"
          haltOnFailure: true
      - ShellCommand: &get_prev_iso_checksum
          name: Get %(prop:metalk8s_prev_version)s checksum
          command: >
            shasumurl="/pre/SHA256SUM-%(prop:metalk8s_prev_version)s";
            curl -s -XGET -o /tmp/SHA256SUM
            "%(prop:artifacts_private_url)s$shasumurl"
          haltOnFailure: true
      - ShellCommand: &verify_prev_iso_checksum
          name: Verify %(prop:metalk8s_prev_version)s checksum
          command: cd /tmp && sha256sum -c SHA256SUM
          haltOnFailure: true
      - ShellCommand: &create_prev_iso_mountpoint
          name: Create %(prop:metalk8s_prev_version)s mountpoint
          command: >
            sudo mkdir -p /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s
      - ShellCommand: &mount_prev_iso
          name: Mount %(prop:metalk8s_prev_version)s image
          command: >
            sudo mount -o loop /tmp/metalk8s.iso
            /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s
          haltOnFailure: true
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand:
          name: Create bootstrap configuration file
          command: |
            sudo bash << EOF
            mkdir -p /etc/metalk8s
            cat > /etc/metalk8s/bootstrap.yaml << END
            apiVersion: metalk8s.scality.com/v1alpha2
            kind: BootstrapConfiguration
            networks:
              controlPlane: 10.100.0.0/16
              workloadPlane: 10.100.0.0/16
            ca:
              minion: $(hostname)
            apiServer:
              host: $(ip route get 10.100.0.0 | awk '/10.100.0.0/{ print $6 }')
            archives:
              - /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s
            END
            EOF
      - ShellCommand:
          name: Start %(prop:metalk8s_prev_version)s bootstrap
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s/bootstrap.sh
            --verbose
          haltOnFailure: true
      - ShellCommand:
          name: Run fast tests locally
          env:
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s
          command: >
            git checkout "development/%(prop:product_version_prev)s" &&
            tox -e tests-local --
            -m "post and ci and not multinode and not slow"
          haltOnFailure: true
      - ShellCommand:
          name: Run upgrade to %(prop:metalk8s_version)s
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_prev_version)s/iso-manager.sh
            --archive "$(readlink -f metalk8s.iso)" &&
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/upgrade.sh
            --destination-version %(prop:metalk8s_version)s
          haltOnFailure: true
      - ShellCommand:
          name: Run fast tests locally
          env:
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:metalk8s_version)s
          command: >
            git checkout %(prop:branch)s &&
            tox -e tests-local --
            -m "post and ci and not multinode and not slow"
          haltOnFailure: true
      - ShellCommand: *collect_sosreport
      - ShellCommand:
          name: Copy sosreport to correct directory structure
          command: >
            mkdir -p sosreport/sosreport/single-node-upgrade-test &&
            cp /var/tmp/sosreport* sosreport/sosreport/single-node-upgrade-test
          alwaysRun: true
      - Upload: *upload_report_artifact
      - ShellCommand:
          name: Debug step - wait 1 hour before allowing resource destruction
          timeout: 3600
          command: sleep 3600
          doStepIf: false
          alwaysRun: true

  multiple-nodes:
    worker:
      type: openstack
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
      path: eve/workers/openstack-multiple-nodes
    steps:
      - Git: *git_pull
      - ShellCommand: *ssh_ip_setup
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand:
          name: Init terraform
          command: terraform init
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Validate terraform definition
          command: terraform validate
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Spawn openstack virtual infra
          command: terraform apply -auto-approve
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          env: &terraform_spawn_multiple_nodes
            OS_AUTH_URL: "%(secret:scality_cloud_auth_url)s"
            OS_REGION_NAME: "%(secret:scality_cloud_region)s"
            OS_USERNAME: "%(secret:scality_cloud_username)s"
            OS_PASSWORD: "%(secret:scality_cloud_password)s"
            OS_TENANT_NAME: "%(secret:scality_cloud_tenant_name)s"
            # FIXME: this makes hostnames too long
            # TF_VAR_worker_uuid: "%(prop:worker_uuid)s"
            TF_VAR_nodes_count: "2"
          haltOnFailure: true
      - ShellCommand:
          name: Check SSH config for bootstrap node
          command: |-
            if [ ! -f ssh_config ]; then
              echo "Missing SSH config file" >&2
              exit 1
            fi
            for _ in $(seq 1 12); do
              sleep 5
              ssh -F ssh_config bootstrap id && break
            done;
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          # FIXME: find a way to share bastion public key to all spawned
          # instances from Terraform
          name: Send bastion public key to nodes
          command: >
            scp -F ssh_config -3 bastion:.ssh/bastion.pub bootstrap:.ssh/ &&
            ssh -F ssh_config bootstrap
            "cat .ssh/bastion.pub >> .ssh/authorized_keys" &&
            scp -F ssh_config -3 bastion:.ssh/bastion.pub node1:.ssh/ &&
            ssh -F ssh_config node1
            "cat .ssh/bastion.pub >> .ssh/authorized_keys"
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
      - ShellCommand:
          # FIXME: find a cleaner way with Terraform.
          name: Send bastion private key to bootstrap
          command: >
              ssh -F ssh_config bootstrap "sudo mkdir -p /etc/metalk8s/pki/" &&
              scp -F ssh_config -3 bastion:.ssh/bastion bootstrap:./         &&
              ssh -F ssh_config bootstrap "sudo cp bastion /etc/metalk8s/pki/"
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
      - ShellCommand:
          name: Copy ISO to bootstrap node
          command: >
            scp -F ssh_config ../../../../metalk8s.iso bootstrap:
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Create mountpoint in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo mkdir -p /var/tmp/metalk8s
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Mount ISO image in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo mount -o loop metalk8s.iso /var/tmp/metalk8s
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Start the bootstrap process in bootstrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo bash
            /var/tmp/metalk8s/bootstrap.sh --verbose
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Install kubectl on the boostrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo yum install -y kubectl --disablerepo=*
            --enablerepo=metalk8s-kubernetes
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
      - ShellCommand:
          name: Enable IPIP
          env:
            SSH_CONFIG: >-
              eve/workers/openstack-multiple-nodes/terraform/ssh_config
          command: >
            ssh -F $SSH_CONFIG bootstrap
            'bash /home/centos/scripts/enable_ipip.sh'
      - ShellCommand:
          # FIXME: should find a cleaner way to do this (git clone may be
          # cumbersome, unless we assume the repo is public and don't use
          # authentication)
          name: Copy test sources to the bastion
          env:
            SSH_CONFIG: >-
              eve/workers/openstack-multiple-nodes/terraform/ssh_config
          command: >
            tar cfp - tox.ini VERSION tests/ buildchain/buildchain/versions.py
            | ssh -F $SSH_CONFIG bastion '(mkdir metalk8s; cd "$_"; tar xf -)'
      - ShellCommand:
          name: Run tests on the bastion
          # yamllint disable rule:line-length
          command: >
            ssh -F ssh_config bastion --
            'cd metalk8s &&
            export SSH_CONFIG_FILE=/home/centos/ssh_config &&
            export ISO_MOUNTPOINT=/var/tmp/metalk8s &&
            export TEST_HOSTS_LIST=bootstrap &&
            tox -e tests -- -m "ci and not slow" &&
            tox -e tests -- -m "ci and slow"'
          # yamllint enable rule:line-length
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Generate sosreport on every machine
          env:
            SSH_CONFIG: >-
              eve/workers/openstack-multiple-nodes/terraform/ssh_config
          command: >
            for host in bootstrap node1; do
              ssh -F $SSH_CONFIG $host \
              "sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True\
              -o containerd -kcontainerd.all=True -kcontainerd.logs=True\
              --batch --tmp-dir /var/tmp && \
              sudo chown centos:centos /var/tmp/sosreport*"
            done
          alwaysRun: true
      - ShellCommand:
          name: Download every sosreport to the bastion
          env:
            SSH_CONFIG: >-
              eve/workers/openstack-multiple-nodes/terraform/ssh_config
          command: >
            mkdir -p sosreport/sosreport/multi-node &&
            for host in bootstrap node1; do
              scp -F $SSH_CONFIG \
              $host:/var/tmp/sosreport-* \
              sosreport/sosreport/multi-node/$host-sosreport.tar.xz
            done
          alwaysRun: true
      - Upload:
          name: Upload sosreport tarballs
          source: sosreport
          alwaysRun: true
      - ShellCommand:
          name: Debug step - wait 4 hours before allowing resource destruction
          timeout: 14400
          command: sleep 14400
          alwaysRun: true
          doStepIf: false
      - ShellCommand:
          name: Destroy openstack virtual infra
          command: |-
            for _ in $(seq 1 3); do
               terraform destroy -auto-approve && break
            done;
          workdir: build/eve/workers/openstack-multiple-nodes/terraform/
          env: *terraform_spawn_multiple_nodes
          alwaysRun: true
          sigtermTime: 600
