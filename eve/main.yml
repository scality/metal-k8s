---
version: "0.2"

branches:
  # yamllint disable rule:line-length
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*, documentation/*, release/*:
    stage: pre-merge

models:
  # --- Re-usable steps (no parameters) ---
  - Git: &git_pull
      name: git pull
      repourl: "%(prop:git_reference)s"
      method: clobber
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &git_pull_ssh
      name: Git pull on bastion
      command: >
        ssh -F ssh_config bastion --
        git clone "https://github.com/scality/metalk8s" --branch "%(prop:branch)s"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &setup_cache
      name: Setup proxy cache
      command: >
          curl -s http://proxy-cache/setup.sh | sudo sh &&
          . /usr/local/bin/use_scality_proxy_cache
      haltOnFailure: true
  - SetProperty: &set_premerge_url
      name: Set premerge artifacts private_url as Property
      property: premerge_artifacts_private_url
      value: "http://artifacts/builds/%(prop:premerge_artifacts_name)s"
  - ShellCommand: &wait_for_docker
      name: Wait for Docker daemon to be ready
      command: |
        bash -c '
        for i in {1..150}
        do
          docker info &> /dev/null && exit
          sleep 2
        done
        echo "Could not reach Docker daemon from buildbot worker" >&2
        exit 1'
      haltOnFailure: true
  - ShellCommand: &wait_pods_running
      name: Wait for pods to be in running state
      env: &_env_wait_pods_running
        RETRY: "60"
        SLEEP_TIME: "5"
        STABILIZATION_TIME: "30"
        STATUS: "Running"
        EXTRA_OPTS: ""
      command: >
        git checkout "%(prop:branch)s" &&
        sudo eve/wait_pods_status.sh
        --sleep-time "$SLEEP_TIME" --stabilization-time "$STABILIZATION_TIME"
        --status "$STATUS" --retry "$RETRY" $EXTRA_OPTS
      usePTY: true
      haltOnFailure: true
  - ShellCommand: &wait_pods_running_ssh
      name: Wait for pods to be in running state
      env: &_env_wait_pods_running_ssh
        <<: *_env_wait_pods_running
        SSH_CONFIG: ssh_config
        SSH_HOST: bootstrap
        EXTRA_OPTS: ""
      command: >
        git checkout "%(prop:branch)s" &&
        scp -F "$SSH_CONFIG" %(prop:builddir)s/build/eve/wait_pods_status.sh "$SSH_HOST":/tmp/ &&
        ssh -F "$SSH_CONFIG" "$SSH_HOST" sudo /tmp/wait_pods_status.sh
        --sleep-time "$SLEEP_TIME" --stabilization-time "$STABILIZATION_TIME"
        --status "$STATUS" --retry "$RETRY" $EXTRA_OPTS
      usePTY: true
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &build_all
      name: Build everything
      env:
        PYTHON_SYS: python3.6
      # There are 3 CPUs available for Docker, and 1 for `doit` in the Pod.
      # Given the network IO-bound nature of some of the build steps, and
      # most build steps running in Docker, set concurrency to 4.
      command: source /etc/profile && ./doit.sh -n 4
      usePTY: true
      haltOnFailure: true
  - ShellCommand: &ssh_ip_setup
      name: Install SSH keys and report connection info
      command: |
        mkdir -p ~/.ssh
        echo "%(secret:ssh_pub_keys)s" >> ~/.ssh/authorized_keys
        IP=$(
          ip -f inet addr show eth0 | sed -En 's/^.*inet ([0-9.]+).*$/\1/p'
        )
        cat << END
        Connect to this worker using:
            ssh eve@$IP
        END
  - ShellCommand: &check_iso_checksum
      name: Check image with checksum
      command: sha256sum -c SHA256SUM
      haltOnFailure: true
  - Upload: &upload_artifacts
      name: Upload artifacts
      source: artifacts
      alwaysRun: True
  - Upload: &upload_report_artifacts
      name: Upload sosreport logs to artifacts
      source: sosreport
      alwaysRun: True
  - Upload: &upload_cypress_artifacts
      name: Upload Cypress and UI Junit folder
      source: ui-tests
      alwaysRun: true
  - ShellCommand: &collect_sosreport
      name: Collect logs using sosreport
      command: >
        sudo sosreport --all-logs
        -o metalk8s -kmetalk8s.podlogs=True
        -o containerd -kcontainerd.all=True -kcontainerd.logs=True
        --batch --tmp-dir /var/tmp &&
        sudo chown eve:eve /var/tmp/sosreport*
      alwaysRun: true
  - ShellCommand: &wait_debug
      name: Debug step - wait before allowing resource destruction
      env:
        # Use this step with STEP_NAME and DURATION environment values to
        # customize the command behaviour. DURATION default value is 3600
        # (wait duration, in seconds).
        STEP_NAME: default
      timeout: 3600
      command: |
        bash -c '
        DEBUG_STEPS="%(prop:debug)s"
        DURATION="${DURATION:-3600}"
        RUN_STEP=0
        REASON=""
        if [ -z "$DEBUG_STEPS" ]; then
          REASON="\"debug\" build property not set"
        elif [ "$DEBUG_STEPS" = all ]; then
          RUN_STEP=1
          REASON="\"debug\" property set to \"all\""
        elif [[ "$DEBUG_STEPS" =~ ^[a-z\-]+(~[a-z\-]+)*$ ]]; then
          IFS="~" read -ra SELECTED <<< "$DEBUG_STEPS"
          for selected in "${SELECTED[@]}"; do
            if [ "$selected" = "$STEP_NAME" ]; then
              RUN_STEP=1
              REASON="step selected in \"$DEBUG_STEPS\""
              break
            fi
          done
          if [ "$RUN_STEP" -eq 0 ]; then
            REASON="step not in \"$DEBUG_STEPS\""
          fi
        else
          REASON="invalid \"debug\" property value"
          cat >&2 << EOF
        Invalid "debug" build property value "$DEBUG_STEPS".
        Must use either:
          - "all", to select all debug steps
          - a single step name
          - a list of step names, separated by tilde signs "~",
            e.g. "single-node~multiple-nodes".
        EOF
        fi
        if [ "$RUN_STEP" -eq 1 ]; then
          echo "Step $STEP_NAME - wait $DURATION seconds"
          echo "Reason: $REASON"
          sleep "$DURATION"
        else
          echo "Step $STEP_NAME - skip debug"
          echo "Reason: $REASON"
        fi'
      alwaysRun: true

  # --- Re-usable steps (with parameters) ---
  - SetPropertyFromCommand: &set_version_prop
      name: Set version as property from built artifacts
      property: metalk8s_version
      env:
        BASE_URL: "%(prop:premerge_artifacts_private_url)s"
      command: >
        bash -c '
        . <(curl -s "${BASE_URL}/product.txt") &&
        echo $VERSION'
  - SetPropertyFromCommand: &set_short_version_prop
      name: Set short version as property from built artifacts
      property: metalk8s_short_version
      env:
        BASE_URL: "%(prop:premerge_artifacts_private_url)s"
      command: >
        bash -c '
          . <(curl -s "${BASE_URL}/product.txt") &&
          echo $SHORT_VERSION'
  - ShellCommand: &copy_artifacts
      name: Put the artifacts to upload in a separate directory
      env: &_env_copy_artifacts
        DEST_DIR: "artifacts"
        ARTIFACTS: >-
          _build/metalk8s.iso
          _build/SHA256SUM
          _build/root/product.txt
      command: |
        bash -c '
        mkdir "${DEST_DIR}" -p
        for artifact in ${ARTIFACTS}; do
          cp -r "$artifact" "${DEST_DIR}"
        done'
      haltOnFailure: true
      alwaysRun: true
  - ShellCommand: &copy_report_artifacts
      name: Put the sosreport logs to upload in a separate directory
      env:
        DEST_DIR: sosreport/sosreport
      command: mkdir -p "${DEST_DIR}" && cp /var/tmp/sosreport* "${DEST_DIR}"
      alwaysRun: true
  - ShellCommand: &retrieve_iso_checksum
      name: Retrieve ISO image checksum
      env: &_env_retrieve_artifact
        BASE_URL: "%(prop:premerge_artifacts_private_url)s"
        DEST_DIR: "."
      command: >
        curl -s -XGET -o "${DEST_DIR}/SHA256SUM" "${BASE_URL}/SHA256SUM"
      # Three minutes should be enough for this small file
      timeout: 180
  - ShellCommand: &retrieve_iso
      name: Retrieve ISO image
      env: &_env_retrieve_artifact_retry
        <<: *_env_retrieve_artifact
        MAX_ATTEMPTS: "300"  # retry every 2 seconds for 10 minutes total
        FILE_SOURCE: 'metalk8s.iso'
        FILE_DEST: ''
      command: |
        bash -c '
        in_url="${BASE_URL}/$FILE_SOURCE"
        out_path="${DEST_DIR}/${FILE_DEST:-$FILE_SOURCE}"
        for ((i=1;i<=MAX_ATTEMPTS;i++)); do
          if [ $(( $i % 10 )) -eq 1 ]; then
            echo "Attempt $i out of ${MAX_ATTEMPTS}"
          fi
          curl -s -XGET -o "${out_path}" "${in_url}" && exit
          sleep 2
        done
        echo "Could not retrieve $FILE_SOURCE after $MAX_ATTEMPTS attempts" >&2
        exit 1'
      haltOnFailure: true
      # Increase default timeout for ISOs, as artifacts may be too slow
      timeout: 2400
  - ShellCommand: &copy_iso_bootstrap_ssh
      name: Copy ISO to bootstrap node
      env: &_env_copy_iso_bootstrap_ssh
        DEST: ''
      command: >
        scp -F ssh_config "%(prop:builddir)s/build/metalk8s.iso"
        bootstrap:"$DEST"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &create_mountpoint
      name: Create mountpoint
      env:
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
      command: sudo mkdir -p "/srv/scality/metalk8s-${PRODUCT_VERSION}"
  - ShellCommand: &create_mountpoint_ssh
      name: Create mountpoint in bootstrap node
      command: >
        ssh -F ssh_config bootstrap
        sudo mkdir -p /var/tmp/metalk8s
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &mount_iso
      name: Mount ISO image
      env:
        ISO_PATH: metalk8s.iso
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
      command: >
        sudo mount -o loop "${ISO_PATH}"
        "/srv/scality/metalk8s-${PRODUCT_VERSION}"
  - ShellCommand: &mount_iso_ssh
      name: Mount ISO image in bootstrap node
      env: &_env_mount_iso_ssh
        ARCHIVE: metalk8s.iso
        MOUNTPOINT: /var/tmp/metalk8s
      command: >
        ssh -F ssh_config bootstrap
        sudo mount -o loop ${ARCHIVE} ${MOUNTPOINT}
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &set_bootstrap_minion_id_ssh
      name: Set the Salt minion ID on boostrap node
      env:
        MINION_ID: "bootstrap"
      command: |
        ssh -F ssh_config bootstrap "
        sudo bash << EOF
        mkdir -p /etc/salt
        echo \"$MINION_ID\" > /etc/salt/minion_id
        EOF"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &bootstrap_config
      name: Create bootstrap configuration file
      env:
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
        DEBUG: "%(prop:metalk8s_debug:-false)s"
      command: |
        sudo bash << EOF
        mkdir -p /etc/metalk8s
        cat > /etc/metalk8s/bootstrap.yaml << END
        apiVersion: metalk8s.scality.com/v1alpha2
        kind: BootstrapConfiguration
        networks:
          controlPlane: 10.100.0.0/16
          workloadPlane: 10.100.0.0/16
        ca:
          minion: "bootstrap"
        apiServer:
          host: $(ip route get 10.100.0.0 | awk '/10.100.0.0/{ print $6 }')
        archives:
          - "/srv/scality/metalk8s-${PRODUCT_VERSION}"
        debug: ${DEBUG}
        END
        EOF
      haltOnFailure: true
  - ShellCommand: &bootstrap_config_ssh
      name: Create bootstrap configuration file on bootstrap
      env: &_env_bootstrap_config_ssh
        DEBUG: "%(prop:metalk8s_debug:-false)s"
        ARCHIVE: /var/tmp/metalk8s
      command: |
        ssh -F ssh_config bootstrap "
        sudo bash << EOF
        mkdir -p /etc/metalk8s
        cat > /etc/metalk8s/bootstrap.yaml << END
        apiVersion: metalk8s.scality.com/v1alpha3
        kind: BootstrapConfiguration
        networks:
          controlPlane:
            cidr: 192.168.1.0/24
          workloadPlane:
            cidr: 192.168.2.0/24
        ca:
          minion: \"bootstrap\"
        archives:
          - \"${ARCHIVE}\"
        debug: ${DEBUG}
        END
        EOF"
      haltOnFailure: true
      workdir: build/eve/workers/openstack-terraform/terraform/
  - ShellCommand: &run_bootstrap
      name: Start the bootstrap process
      env:
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
      command: >
        sudo bash
        "/srv/scality/metalk8s-${PRODUCT_VERSION}/bootstrap.sh"
        --verbose
      haltOnFailure: true
  - ShellCommand: &run_bootstrap_ssh
      name: Start the bootstrap process in bootstrap node
      command: >
        ssh -F ssh_config bootstrap
        sudo bash
        /var/tmp/metalk8s/bootstrap.sh --verbose
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &provision_volumes_ssh
      name: Provision MetalK8s Volumes
      env: &_env_provision_volumes
        SSH_CONFIG: ssh_config
        HOST: bootstrap
        NODE_NAME: bootstrap
        PRODUCT_MOUNT: "/var/tmp/metalk8s"
        PRODUCT_TXT: "/var/tmp/metalk8s/product.txt"
      command: >
        scp -F "$SSH_CONFIG" "%(prop:builddir)s/build/eve/create-volumes.sh" "$HOST":/tmp/create-volumes.sh &&
        ssh -F "$SSH_CONFIG" "$HOST"
        sudo env
        PRODUCT_MOUNT="$PRODUCT_MOUNT"
        PRODUCT_TXT="$PRODUCT_TXT"
        NODE_NAME=$NODE_NAME
        /tmp/create-volumes.sh
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &add_archive
      name: Add ISO to cluster
      env: &_env_add_archive
        ISO_PATH: metalk8s.iso
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
      command: >
        sudo bash
        "/srv/scality/metalk8s-${PRODUCT_VERSION}/iso-manager.sh"
        --archive "$(readlink -f "${ISO_PATH}")" --verbose
      haltOnFailure: true
  - ShellCommand: &add_archive_ssh
      name: Add ISO to cluster from Bootstrap
      env: &_env_add_archive_ssh
        ISO_PATH: metalk8s.iso
        PRODUCT_VERSION: "%(prop:metalk8s_version)s"
      command: >
        ssh -F ssh_config bootstrap "
        sudo bash
        /srv/scality/metalk8s-${PRODUCT_VERSION}/iso-manager.sh
        --archive \"\$(readlink -f \"${ISO_PATH}\")\" --verbose"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &local_tests
      name: Run tests locally
      env: &_env_local_tests
        BRANCH: "%(prop:branch)s"
        ISO_MOUNTPOINT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        PYTEST_FILTERS: "post and ci and not multinodes"
      command: >
        git checkout "${BRANCH}" &&
        tox -e tests-local -- -m "${PYTEST_FILTERS}"
      haltOnFailure: true
  - ShellCommand: &bastion_tests
      name: Run tests on Bastion
      env: &_env_bastion_tests
        SSH_CONFIG_FILE: "/home/centos/ssh_config"
        ISO_MOUNTPOINT: "/var/tmp/metalk8s"
        TEST_HOSTS_LIST: "bootstrap"
        PYTEST_FILTERS: "post and ci"
        BOOTSTRAP_BACKUP_ARCHIVE: ""
      command: >
        ssh -F ssh_config bastion --
        "cd metalk8s &&
        export SSH_CONFIG_FILE=\"${SSH_CONFIG_FILE}\" &&
        export ISO_MOUNTPOINT=\"${ISO_MOUNTPOINT}\" &&
        export TEST_HOSTS_LIST=\"${TEST_HOSTS_LIST}\" &&
        export BOOTSTRAP_BACKUP_ARCHIVE=\"${BOOTSTRAP_BACKUP_ARCHIVE}\" &&
        tox -e tests -- ${PYTEST_ARGS:-""} -m \"${PYTEST_FILTERS}\""
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &bastion_fast_tests
      <<: *bastion_tests
      name: Run fast tests on Bastion
      env: &_env_bastion_fast_tests
        <<: *_env_bastion_tests
        PYTEST_FILTERS: "post and ci and not multinode and not slow"
  - SetPropertyFromCommand: &set_bootstrap_cp_ip_ssh
      name: Set the bootstrap node control plane IP as a property
      property: bootstrap_control_plane_ip
      command: >
        ssh -F ssh_config bootstrap "
            sudo salt-call grains.get metalk8s:control_plane_ip --out txt |
            sed -rn 's/^local: (.*)$/\1/p'
        "
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &bastion_ui_tests
      name: Run UI tests on Bastion
      env: &_env_bastion_ui_tests
        TEST_FILTER: "e2e"
        TARGET_URL: "https://%(prop:bootstrap_control_plane_ip)s:8443"
      command: >
        ssh -F ssh_config bastion --
        "cd metalk8s/ui &&
        CYPRESS_BASE_URL=$TARGET_URL npm run test:$TEST_FILTER"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &add_final_status_artifact
      name: Add final status to artifacts
      command: |-
        bash -c '
          declare BUILD_STATUS_DIR=build_status
          [[ ${STEP_NAME:-} ]] && BUILD_STATUS_DIR+="/build_status/$STEP_NAME"
          mkdir -p "$BUILD_STATUS_DIR"
          echo -n "$FINAL_STATUS" > "$BUILD_STATUS_DIR/.final_status"
          TEST_NAME="${TEST_NAME:-$STEP_NAME}"
          if [[ ${TEST_NAME:-} && ${TEST_SUITE:-} ]]; then
              git checkout "%(prop:branch)s" && \
              eve/generate_junit_result.sh \
                  > "$BUILD_STATUS_DIR/junit_status.xml"
          fi
        '
      env: &_env_final_status_artifact
        STEP_NAME: ''
        FINAL_STATUS: ''
        TEXT: |-
          Build Url: %(prop:buildurl)s
          Artifact Url: %(prop:artifacts_public_url)s
          Branch: %(prop:branch)s
          Commit: %(prop:revision)s
      haltOnFailure: True
  - ShellCommand: &add_final_status_artifact_success
      <<: *add_final_status_artifact
      name: Add successful status to artifacts
      env: &_env_final_status_artifact_success
        <<: *_env_final_status_artifact
        FINAL_STATUS: "SUCCESSFUL"
  - ShellCommand: &add_final_status_artifact_failed
      <<: *add_final_status_artifact
      name: Add failed status to artifacts
      env: &_env_final_status_artifact_failed
        <<: *_env_final_status_artifact
        FINAL_STATUS: "FAILED"
  - Upload: &upload_final_status_artifact
      name: Upload final status to artifacts
      source: build_status
      alwaysRun: True

  # --- Re-usable steps related to terraform actions ---
  - ShellCommand: &terraform_install
      name: Download and install terraform
      env:
        TF_VERSION: "0.12.3"
      command: >
        TF_URL="https://releases.hashicorp.com/terraform/${TF_VERSION}/";
        TF_FILE="terraform_${TF_VERSION}_linux_amd64.zip";
        curl --retry 5 -O "${TF_URL}${TF_FILE}" &&
        sudo unzip "${TF_FILE}" -d /usr/local/sbin/ &&
        rm -f "${TF_FILE}"
      haltOnFailure: true
  - ShellCommand: &terraform_install_check
      name: Check that terraform was installed
      command: |-
        if ! terraform --version 2&> /dev/null; then
          echo "aborting - terraform not installed and required" >&2
          exit 1
        fi
      haltOnFailure: true
  - ShellCommand: &terraform_init
      name: Init terraform
      command: |-
        for try in $(seq 1 $MAX_RETRIES); do
          if terraform init; then
            break
          elif [ $try -lt $MAX_RETRIES ]; then
            rm -rf .terraform/
            sleep 5
          else
            echo "Error: unable to initialize terraform after" \
                 "$MAX_RETRIES tries" >&2
            exit 1
          fi
        done
      env:
        MAX_RETRIES: "12"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &terraform_validate
      name: Validate terraform definition
      command: terraform validate
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &terraform_apply
      name: Spawn openstack virtual infra
      command: |-
        for try in $(seq 1 $MAX_RETRIES); do
          if terraform apply -auto-approve; then
            break
          elif [ $try -lt $MAX_RETRIES ]; then
            sleep 300
          else
            echo "Error: unable to spawn openstack virtual infra after" \
                 "$MAX_RETRIES tries" >&2
            exit 1
          fi
        done
      env: &_env_terraform
        OS_AUTH_URL: "%(secret:scality_cloud_auth_url)s"
        OS_REGION_NAME: "%(secret:scality_cloud_region)s"
        OS_USERNAME: "%(secret:scality_cloud_username)s"
        OS_PASSWORD: "%(secret:scality_cloud_password)s"
        OS_TENANT_NAME: "%(secret:scality_cloud_tenant_name)s"
        TF_VAR_prefix: "%(prop:buildnumber)s-%(prop:stage_name)s"
        TF_VAR_debug: "%(prop:metalk8s_debug:-false)s"
        MAX_RETRIES: "3"
      workdir: build/eve/workers/openstack-terraform/terraform/
      haltOnFailure: true
  - ShellCommand: &terraform_destroy
      name: Destroy openstack virtual infra
      command: |-
        for try in $(seq 1 $MAX_RETRIES); do
          if terraform destroy -auto-approve; then
            break
          elif [ $try -lt $MAX_RETRIES ]; then
            sleep 300
          else
            echo "Error: unable to destroy openstack virtual infra after" \
                 "$MAX_RETRIES tries" >&2
            exit 1
          fi
        done
      env: *_env_terraform
      workdir: build/eve/workers/openstack-terraform/terraform/
      alwaysRun: true
      sigtermTime: 600

  # --- Previous version (for Upgrade/Downgrade) ---
  - Git: &git_pull_prev
      name: clone previous version branch
      command: >
          git clone "%(prop:repository)s"
          --branch "development/%(prop:product_version_prev)s"
          metalk8s-"%(prop:product_version_prev)s"
      haltOnFailure: true

  - ShellCommand: &generate_report_over_ssh
      name: Generate sosreport on every machine
      env: &_env_generate_report_over_ssh
        HOSTS_LIST: "bootstrap"
        SSH_CONFIG: ssh_config
        REPORT_OWNER: centos
        REPORT_GROUP: centos
      command: >
        for host in $HOSTS_LIST; do
          ssh -F "$SSH_CONFIG" $host \
          "sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True\
          -o containerd -kcontainerd.all=True -kcontainerd.logs=True\
          --batch --tmp-dir /var/tmp && \
          sudo chown '$REPORT_OWNER:$REPORT_GROUP' /var/tmp/sosreport*"
        done
      workdir: build/eve/workers/openstack-terraform/terraform/
      alwaysRun: true
  - ShellCommand: &collect_report_over_ssh
      name: Download every sosreports on worker
      env: &_env_collect_report_over_ssh
        HOSTS_LIST: "bootstrap"
        SSH_CONFIG: ssh_config
        DEST_DIR: "%(prop:builddir)s/build/sosreport/sosreport"
        STEP_NAME: ''
      command: >
        mkdir -p "$DEST_DIR/$STEP_NAME" &&
        for host in $HOSTS_LIST; do
          scp -F "$SSH_CONFIG" \
          "$host:/var/tmp/sosreport-*.tar.xz" \
          "$DEST_DIR/$STEP_NAME/$host-sosreport.tar.xz"
        done
      workdir: build/eve/workers/openstack-terraform/terraform/
      alwaysRun: true
  - ShellCommand: &collect_cypress_result_ssh
      name: Download Cypress result from Bastion
      env:
        SSH_HOST: bastion
        SSH_CONFIG: ssh_config
        DEST_DIR: "%(prop:builddir)s/build/ui-tests"
      command: |-
        mkdir -p "$DEST_DIR/cypress"
        scp -r -F "$SSH_CONFIG" "$SSH_HOST":metalk8s/ui/cypress/screenshots "$DEST_DIR/cypress/"
        scp -r -F "$SSH_CONFIG" "$SSH_HOST":metalk8s/ui/cypress/videos "$DEST_DIR/cypress/"
        scp -r -F "$SSH_CONFIG" "$SSH_HOST":metalk8s/ui/junit "$DEST_DIR"
      workdir: build/eve/workers/openstack-terraform/terraform/
      alwaysRun: true

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - ShellCommand: *add_final_status_artifact_failed
      - SetProperty:
          # Set premerge_artifacts_name to current artifacts name
          # as we are in premerge so we can use same step to retrieve ISO
          # in pre-merge and post-merge
          name: Set premerge artifacts name to current artifacts_name
          property: premerge_artifacts_name
          value: "%(prop:artifacts_name)s"
      - SetProperty: *set_premerge_url
      - TriggerStages:
          name: Trigger build, docs and lint stages simultaneously
          stage_names:
            - build
            - docs
            - lint
            - unit_tests
            - integration_tests_ui
          haltOnFailure: true
      - SetPropertyFromCommand: *set_version_prop
      - SetPropertyFromCommand: *set_short_version_prop
      - TriggerStages:
          name: Trigger multiple-nodes step with built ISO
          stage_names:
            - single-node-install-rhel
            - multiple-nodes-centos
      - ShellCommand: *add_final_status_artifact_success
      - Upload: *upload_final_status_artifact

  post-merge:
    # Only let 2 post merge run simultaneously
    simultaneous_builds: 2
    worker:
      type: local
    steps:
      - GetArtifactsFromStage:
          name: Get pre-merge artifacts_name
          stage: pre-merge
          property: premerge_artifacts_name
          haltOnFailure: True
      - SetProperty: *set_premerge_url
      - ShellCommand:
          name: Save the pre-merge artifacts reference
          command: >
            mkdir -p build_status/.related_artifacts
            && touch
            "build_status/.related_artifacts/%(prop:premerge_artifacts_name)s"
          haltOnFailure: True
      - SetPropertyFromCommand: *set_version_prop
      - SetPropertyFromCommand: *set_short_version_prop
      - TriggerStages:
          name: Trigger post-merge lifecycle and solutions stages simultaneously
          stage_names:
            - post-merge-solutions
            - lifecycle-dev-branch
            - lifecycle-patch-version
            - lifecycle-minor-version
            - bootstrap-restore
          haltOnFailure: true
      - ShellCommand: *add_final_status_artifact_success
      - Upload: *upload_final_status_artifact
      - TriggerStages:
          name: Trigger TestRail objects creation and results upload
          stage_names:
            - create-upload-testrail-objects
          alwaysRun: True

  post-merge-solutions:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Trigger build of Example Solution archive
          stage_names:
            - build-example-solution
          haltOnFailure: true
      - TriggerStages:
          name: Trigger Solutions framework tests
          stage_names:
            - single-node-solutions
          haltOnFailure: true

  lifecycle-dev-branch:
    worker:
      type: local
    steps:
      - SetPropertyFromCommand:
          name: Set previous version to upgrade from and downgrade to
          property: product_version_prev
          command: >
              major=$(echo "%(prop:product_version)s" | cut -d'.' -f1) &&
              minor=$(echo "%(prop:product_version)s" | cut -d'.' -f2) &&
              echo "$major.$(( $minor-1 ))"
      - TriggerStages:
          name: Trigger build of previous version
          stage_names:
            - buildprev
          haltOnFailure: true
      - SetPropertyFromCommand:
          <<: *set_version_prop
          name: Set previous version as property from built artifacts
          property: metalk8s_version_prev
          env:
            BASE_URL: "%(prop:artifacts_private_url)s/pre"
      - TriggerStages:
          name: Trigger upgrade and downgrade test stages simultaneously
          stage_names:
            - single-node-upgrade-centos
            # Cannot downgrade from a 3.4 etcd cluster to 3.3
            # - single-node-downgrade-centos
          waitForFinish: True

  create-upload-testrail-objects:
    worker:
      type: kube_pod
      path: eve/workers/pod-basic/pod.yaml
      images:
        docker-basic: eve/workers/docker-centos7
      vars:
        name: "metalk8s-test-tools-worker"
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Install test tools requirements
          command: >
            git clone git@github.com:scality/test_tools.git &&
            sudo yum install -y epel-release &&
            sudo yum install -y wget python3.6 python3-pip &&
            pip3 install --user -r test_tools/testrail/requirements.txt
      - ShellCommand:
          name: Create TestRail objects
          env: &env_testrail
            TESTRAIL_LOGIN: "%(secret:testrail_login)s"
            TESTRAIL_KEY: "%(secret:testrail_key)s"
            TESTRAIL_PROJECT: "MetalK8s"
            TESTRAIL_MILESTONE: "%(prop:metalk8s_short_version)s"
            TESTRAIL_SUITE: "%(prop:metalk8s_short_version)s"
            TESTRAIL_PLAN: "%(prop:metalk8s_version)s"
            DESCRIPTION_FILE: "eve/testrail_description_file.yaml"
          command: >
            python3 test_tools/testrail/testrail_create.py
            --user "$TESTRAIL_LOGIN"
            --password "$TESTRAIL_KEY"
            --project "$TESTRAIL_PROJECT"
            --milestone "$TESTRAIL_MILESTONE"
            --test-suite "$TESTRAIL_SUITE"
            --test-plan "$TESTRAIL_PLAN"
            "$DESCRIPTION_FILE"
          haltOnFailure: False
      - ShellCommand:
          name: Upload TestRail results
          env:
            <<: *env_testrail
            BASE_URL: "%(prop:artifacts_private_url)s/build_status/"
            PATTERN: "*.xml"
          # This step will upload TestRail result from all xml in
          # `build_status` directory
          # These xml should be JUnit file
          # NOTE: `--tolerate` allow to continue even if one XML upload failed
          #       BUT script will exit with 1 if at least one XML file failed
          command: >
            TEMPDIR="$(mktemp -d)" &&
            wget --tries=10 --recursive --level=10 --no-parent
            --directory-prefix="$TEMPDIR" --accept="$PATTERN"
            "$BASE_URL" &&
            find "$TEMPDIR" -type f -name "$PATTERN" -exec
            python3 test_tools/testrail/testrail_upload_result.py
            --user "$TESTRAIL_LOGIN"
            --password "$TESTRAIL_KEY"
            --project "$TESTRAIL_PROJECT"
            --test-suite "$TESTRAIL_SUITE"
            --test-plan "$TESTRAIL_PLAN"
            --tolerate
            '{}' +

  build:
    _metalk8s_internal_info:
      junit_info: &_build_metalk8s_junit_info
        TEST_SUITE: build
        TEST_NAME: metalk8s
    worker: &build_worker
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
      - ShellCommand: *wait_for_docker
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_build_metalk8s_junit_info
            STEP_NAME: build
      - ShellCommand: *setup_cache
      - ShellCommand: *build_all
      - ShellCommand:
          <<: *copy_artifacts
          env:
            <<: *_env_copy_artifacts
            ARTIFACTS: >-
              build.log
              _build/metalk8s.iso
              _build/SHA256SUM
              _build/root/product.txt
      - Upload: *upload_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_build_metalk8s_junit_info
            STEP_NAME: build
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          name: Cleanup build tree
          env:
            PYTHON_SYS: python3.6
          command: ./doit.sh clean && test ! -d _build
          usePTY: true
          haltOnFailure: true

  buildprev:
    _metalk8s_internal_info:
      junit_info: &_build_metalk8s-previous_junit_info
        TEST_SUITE: build
        TEST_NAME: metalk8s previous
    worker: *build_worker
    steps:
      - ShellCommand: *wait_for_docker
      - ShellCommand: *setup_cache
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_build_metalk8s-previous_junit_info
            STEP_NAME: buildprev
      - ShellCommand: *git_pull_prev
      - ShellCommand:
          <<: *build_all
          workdir: "build/metalk8s-%(prop:product_version_prev)s"
      - ShellCommand:
          <<: *copy_artifacts
          workdir: "build/metalk8s-%(prop:product_version_prev)s"
          env:
            <<: *_env_copy_artifacts
            DEST_DIR: "../artifacts/pre"
      - Upload: *upload_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_build_metalk8s-previous_junit_info
            STEP_NAME: buildprev
      - Upload: *upload_final_status_artifact

  build-example-solution:
    _metalk8s_internal_info:
      junit_info: &_build_ex-solution_junit_info
        TEST_SUITE: build
        TEST_NAME: example solution
    worker:
      type: kube_pod
      path: eve/workers/pod-example-solution-builder/pod.yaml
      images:
        example-solution-builder: eve/workers/pod-example-solution-builder
    steps:
      - ShellCommand: *wait_for_docker
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_build_ex-solution_junit_info
            STEP_NAME: build-example-solution
      - ShellCommand: *setup_cache
      - SetPropertyFromCommand: &set_example_solution_version
          name: Set Example Solution version property
          property: example_solution_version
          command: >
            . examples/metalk8s-solution-example/VERSION &&
            echo "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX"
      - ShellCommand: &build_example_solution_iso
          name: Build Example Solution ISO
          command: >
            cd examples/metalk8s-solution-example &&
            DOCKER_SOCKET=http://localhost:2375 make iso &&
            rm -rf examples/metalk8s-solution-example/_build/images
            examples/metalk8s-solution-example/_build/root/images
          haltOnFailure: True
          timeout: 3600
      - ShellCommand:
          name: Increment Example Solution patch version
          command: >
            bash -c '
            . examples/metalk8s-solution-example/VERSION &&
            sed -i "s/^VERSION_PATCH=.*$/VERSION_PATCH=$(( ++VERSION_PATCH ))/"
            examples/metalk8s-solution-example/VERSION
            '
          haltOnFailure: True
      - SetPropertyFromCommand:
          <<: *set_example_solution_version
          name: Set Example Solution version next property
          property: example_solution_version_next
      - ShellCommand: *build_example_solution_iso
      - ShellCommand:
          <<: *copy_artifacts
          env:
            <<: *_env_copy_artifacts
            ARTIFACTS: >-
              examples/metalk8s-solution-example/_build/example-solution-%(prop:example_solution_version)s.iso
              examples/metalk8s-solution-example/_build/example-solution-%(prop:example_solution_version_next)s.iso
      - Upload: *upload_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_build_ex-solution_junit_info
            STEP_NAME: build-example-solution
      - Upload: *upload_final_status_artifact

  docs:
    _metalk8s_internal_info:
      junit_info: &_build_docs_junit_info
        TEST_SUITE: build
        TEST_NAME: docs
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: '.'
          dockerfile: docs/Dockerfile
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_build_docs_junit_info
            STEP_NAME: docs
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Build documentation
          env:
            # Fake that we are building in a ReadTheDocs environment
            READTHEDOCS: 'True'
          command: tox --workdir /tmp/tox -e docs -- html latexpdf
          haltOnFailure: true
      - ShellCommand:
          <<: *copy_artifacts
          env:
            <<: *_env_copy_artifacts
            DEST_DIR: "artifacts/docs"
            ARTIFACTS: >-
              docs/_build/*
              CHANGELOG.md
      - Upload:
          <<: *upload_artifacts
          urls:
            - docs/html/index.html
            - docs/latex/MetalK8s.pdf
            - docs/CHANGELOG.md
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_build_docs_junit_info
            STEP_NAME: docs
      - Upload: *upload_final_status_artifact

  lint:
    _metalk8s_internal_info:
      junit_info: &_lint_junit_info
        TEST_SUITE: lint
        # This one should be split in different test case for each linting
        TEST_NAME: full
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter:
          context: 'storage-operator'
          dockerfile: eve/workers/pod-linter/Dockerfile
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_lint_junit_info
            STEP_NAME: lint
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Run all linting targets
          command: source /etc/profile && ./doit.sh lint
          usePTY: true
          haltOnFailure: true
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_lint_junit_info
            STEP_NAME: lint
      - Upload: *upload_final_status_artifact

  integration_tests_ui:
    _metalk8s_internal_info:
      junit_info: &_integration_tests_ui_junit_info
        TEST_SUITE: integration tests
        TEST_NAME: ui
    worker:
      type: kube_pod
      path: eve/workers/pod-integration-tests/ui/pod.yaml
      images:
        worker:
          context: 'ui'
          dockerfile: eve/workers/pod-integration-tests/ui/worker.Dockerfile
        application:
          context: 'ui'
          dockerfile: eve/workers/pod-integration-tests/ui/app.Dockerfile
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_integration_tests_ui_junit_info
            STEP_NAME: integration_tests_ui
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Install Cypress and its dependencies
          workdir: build/ui
          command: |
            PKGS="cypress cypress-cucumber-preprocessor cypress-wait-until"
            for pkg in $PKGS; do
              npm install --no-save --no-package-lock $pkg@$(node -p \
                -e "require('./package-lock.json').dependencies['$pkg'].version" \
              )
            done
          haltOnFailure: true
      - ShellCommand:
          name: Run all UI integration tests
          workdir: build/ui
          env:
            CYPRESS_BASE_URL: http://localhost:80
          command: >
            npm run test:integration --no-update-notifier
          haltOnFailure: true
      - ShellCommand:
          name: Prepare upload folder
          command: |
            mkdir -p upload/ui/cypress
            mv junit upload/ui
            mv cypress/screenshots upload/ui/cypress/screenshots
            mv cypress/videos upload/ui/cypress/videos
          workdir: build/ui
          alwaysRun: true
      - Upload:
          name: Upload Cypress and JUnit artifacts
          source: ui/upload
          urls:
            - ui/junit/*.xml
            - ui/cypress/videos/*
          alwaysRun: true
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_integration_tests_ui_junit_info
            STEP_NAME: integration_tests_ui
      - Upload: *upload_final_status_artifact

  unit_tests:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Trigger all unit tests simultaneously
          stage_names:
            - unit_tests_ui
            - unit_tests_storage_operator
            - unit_tests_salt

  unit_tests_ui:
    _metalk8s_internal_info:
      junit_info: &_unit-test_ui_junit_info
        TEST_SUITE: unit test
        TEST_NAME: ui
    worker:
      type: kube_pod
      path: eve/workers/pod-unit-tests/pod.yaml
      images:
        docker-unit-tests:
          context: 'ui'
          dockerfile: eve/workers/pod-unit-tests/ui/Dockerfile
      vars:
        name: "metalk8s-unit-tests-ui-worker"
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_unit-test_ui_junit_info
            STEP_NAME: unit_tests_ui
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Install UI dependencies
          workdir: build/ui
          command: >
            npm ci --prefer-offline --no-audit
          haltOnFailure: true
      - ShellCommand:
          name: Run all UI unit tests
          workdir: build/ui
          command: >
            npm run test:nowatch --no-update-notifier
          haltOnFailure: true
      - ShellCommand:
          name: Prepare upload folder
          command: |
            mkdir -p upload/ui
            mv junit upload/ui
          workdir: build/ui
          alwaysRun: true
      - Upload:
          name: Upload Cypress and JUnit artifacts
          source: ui/upload
          urls:
            - ui/junit/*.xml
          alwaysRun: true
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_unit-test_ui_junit_info
            STEP_NAME: unit_tests_ui
      - Upload: *upload_final_status_artifact

  unit_tests_storage_operator:
    _metalk8s_internal_info:
      junit_info: &_unit-test_storage_operator_junit_info
        TEST_SUITE: unit test
        TEST_NAME: storage operator
    worker:
      type: kube_pod
      path: eve/workers/pod-unit-tests/pod.yaml
      images:
        docker-unit-tests:
          context: 'storage-operator'
          dockerfile: eve/workers/pod-unit-tests/storage-operator/Dockerfile
      vars:
        name: "metalk8s-unit-tests-storage-operator-worker"
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_unit-test_storage_operator_junit_info
            STEP_NAME: unit_tests_storage_operator
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Run all storage-operator unit tests
          workdir: build/storage-operator
          command: go test -cover -v ./...
          haltOnFailure: true
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_unit-test_storage_operator_junit_info
            STEP_NAME: unit_tests_storage_operator
      - Upload: *upload_final_status_artifact

  unit_tests_salt:
    _metalk8s_internal_info:
      junit_info: &_unit-test_salt_junit_info
        TEST_SUITE: unit test
        TEST_NAME: salt
    worker:
      type: kube_pod
      path: eve/workers/pod-unit-tests/pod.yaml
      images:
        docker-unit-tests:
          context: 'salt'
          dockerfile: eve/workers/pod-unit-tests/salt/Dockerfile
      vars:
        name: "metalk8s-unit-tests-salt-worker"
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_unit-test_salt_junit_info
            STEP_NAME: unit_tests_salt
      - ShellCommand: *setup_cache
      - ShellCommand:
          name: Run all salt unit tests
          command: tox -e unit-tests
          haltOnFailure: true
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_unit-test_salt_junit_info
            STEP_NAME: unit_tests_salt
      - Upload: *upload_final_status_artifact

  single-node-downgrade-centos:
    _metalk8s_internal_info:
      junit_info: &_downgrade_minor_single-node_junit_info
        TEST_SUITE: downgrade
        CLASS_NAME: minor dev.single node.centos7
        TEST_NAME: simple environment
    simultaneous_builds: 20
    worker: &single_node_worker
      type: openstack
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
      path: eve/workers/openstack-single-node
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_downgrade_minor_single-node_junit_info
            STEP_NAME: single-node-downgrade-centos
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      # --- Get ISO for version N ---
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *retrieve_iso
      - ShellCommand: *check_iso_checksum
      # --- Get ISO for version N-1 ---
      - ShellCommand: &retrieve_prev_iso_checksum
          <<: *retrieve_iso_checksum
          env: &_env_previous_artifact
            DEST_DIR: "/tmp"
            BASE_URL: "%(prop:artifacts_private_url)s/pre"
          name: Retrieve previous ISO image checksum
      - ShellCommand: &retrieve_prev_iso
          <<: *retrieve_iso
          name: Retrieve previous ISO image
          env:
            <<: *_env_retrieve_artifact_retry
            <<: *_env_previous_artifact
      - ShellCommand: &check_prev_iso_checksum
          <<: *check_iso_checksum
          name: Check previous ISO image with checksum
          workdir: "/tmp"
      # --- Prepare for Bootstrap in version N ---
      - ShellCommand: *create_mountpoint
      - ShellCommand: *mount_iso
      - ShellCommand: *bootstrap_config
      # --- Install version N ---
      - ShellCommand: *run_bootstrap
      - ShellCommand: &provision_prometheus_volumes
          name: Provision Prometheus and AlertManager storage
          env:
            BRANCH: "%(prop:branch)s"
            PRODUCT_TXT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt"
            PRODUCT_MOUNT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
          command: >
            git checkout "${BRANCH}" --quiet &&
            sudo -E eve/create-volumes.sh
          haltOnFailure: true
      # --- Wait for the cluster to be stabilized ---
      - ShellCommand: *wait_pods_running
      # --- Test version N ---
      - ShellCommand: &fast_tests
          <<: *local_tests
          name: Run fast tests locally
          env: &_env_fast_tests
            <<: *_env_local_tests
            PYTEST_FILTERS: "post and ci and not multinode and not slow"
      - ShellCommand:
          <<: *local_tests
          name: Run slow tests locally
          env:
            <<: *_env_local_tests
            PYTEST_FILTERS: >-
              post and ci and not multinode and slow and not restore
      # --- Downgrade to version N-1 ---
      - ShellCommand:
          <<: *add_archive
          name: Add previous ISO to cluster
          env:
            <<: *_env_add_archive
            ISO_PATH: /tmp/metalk8s.iso
      - ShellCommand:
          name: Run downgrade to previous version
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/downgrade.sh
            --destination-version "%(prop:metalk8s_version_prev)s" --verbose
          haltOnFailure: true
      - ShellCommand: *wait_pods_running
      # --- Test version N-1 ---
      - ShellCommand: &fast_tests_prev
          <<: *local_tests
          name: Run fast tests locally for previous version
          env:
            <<: *_env_fast_tests
            BRANCH: "development/%(prop:product_version_prev)s"
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:metalk8s_version_prev)s
      # --- Collect logs ---
      - ShellCommand: *collect_sosreport
      - ShellCommand:
          <<: *copy_report_artifacts
          env:
            DEST_DIR: sosreport/sosreport/single-node-downgrade-centos
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_downgrade_minor_single-node_junit_info
            STEP_NAME: single-node-downgrade-centos
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: single-node-downgrade-centos

  single-node-upgrade-centos:
    _metalk8s_internal_info:
      junit_info: &_upgrade_minor_single-node_junit_info
        TEST_SUITE: upgrade
        CLASS_NAME: minor dev.single node.centos7
        TEST_NAME: simple environment
    simultaneous_builds: 20
    worker: *single_node_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_upgrade_minor_single-node_junit_info
            STEP_NAME: single-node-upgrade-centos
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      # --- Get ISO for version N ---
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *retrieve_iso
      - ShellCommand: *check_iso_checksum
      # --- Get ISO for version N-1 ---
      - ShellCommand: *retrieve_prev_iso_checksum
      - ShellCommand: *retrieve_prev_iso
      - ShellCommand: *check_prev_iso_checksum
      # --- Prepare for Bootstrap in version N-1 ---
      - ShellCommand:
          <<: *create_mountpoint
          env: &_env_version_prev
            PRODUCT_VERSION: "%(prop:metalk8s_version_prev)s"
      - ShellCommand:
          <<: *mount_iso
          env:
            <<: *_env_version_prev
            ISO_PATH: /tmp/metalk8s.iso
      - ShellCommand:
          <<: *bootstrap_config
          env:
            <<: *_env_version_prev
            DEBUG: "%(prop:metalk8s_debug:-false)s"
      # --- Install version N-1 ---
      - ShellCommand:
          <<: *run_bootstrap
          env: *_env_version_prev
      - ShellCommand:
          <<: *provision_prometheus_volumes
          env:
            BRANCH: "development/%(prop:product_version_prev)s"
            PRODUCT_TXT: "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s/product.txt"
            PRODUCT_MOUNT: "/srv/scality/metalk8s-%(prop:metalk8s_version_prev)s"
      - ShellCommand: *wait_pods_running
      # --- Test version N-1 ---
      - ShellCommand: *fast_tests_prev
      # --- Upgrade to version N ---
      - ShellCommand:
          <<: *add_archive
          name: Add current ISO to cluster
          env:
            <<: *_env_add_archive
            PRODUCT_VERSION: "%(prop:metalk8s_version_prev)s"
      - ShellCommand:
          name: Run upgrade from previous version
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/upgrade.sh
            --verbose
          haltOnFailure: true
      - ShellCommand: *provision_prometheus_volumes
      - ShellCommand: *wait_pods_running
      # --- Test version N ---
      - ShellCommand: *fast_tests
      # --- Collect logs ---
      - ShellCommand: *collect_sosreport
      - ShellCommand:
          <<: *copy_report_artifacts
          env:
            DEST_DIR: sosreport/sosreport/single-node-upgrade-centos
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_upgrade_minor_single-node_junit_info
            STEP_NAME: single-node-upgrade-centos
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: single-node-upgrade-centos

  single-node-install-rhel:
    _metalk8s_internal_info:
      junit_info: &_install_single-node_junit_info
        TEST_SUITE: install
        CLASS_NAME: single node.rhel7
        TEST_NAME: simple environment
    simultaneous_build: 20
    worker: &terraform_worker
      <<: *single_node_worker
      flavor: m1.medium
      path: eve/workers/openstack-terraform
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_install_single-node_junit_info
            STEP_NAME: single-node-install-rhel
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand: *terraform_install
      - ShellCommand: *terraform_install_check
      - ShellCommand: *terraform_init
      - ShellCommand: *terraform_validate
      - ShellCommand:
          <<: *terraform_apply
          env: &_env_terraform_single_node_rhel
            <<: *_env_terraform
            TF_VAR_rhsm_username: "%(secret:rhel_ci_login)s"
            TF_VAR_rhsm_password: "%(secret:rhel_ci_password)s"
            TF_VAR_nodes_count: "0"
            TF_VAR_os: "rhel-7"
      - ShellCommand: *set_bootstrap_minion_id_ssh
      - ShellCommand: *bootstrap_config_ssh
      - ShellCommand: *copy_iso_bootstrap_ssh
      - ShellCommand: *create_mountpoint_ssh
      - ShellCommand: *mount_iso_ssh
      - ShellCommand: *run_bootstrap_ssh
      - ShellCommand: *provision_volumes_ssh
      - ShellCommand: *wait_pods_running_ssh
      - ShellCommand: *git_pull_ssh
      - ShellCommand: *bastion_fast_tests
      - SetPropertyFromCommand: *set_bootstrap_cp_ip_ssh
      - ShellCommand: *bastion_ui_tests
      - ShellCommand: *collect_cypress_result_ssh
      - Upload: *upload_cypress_artifacts
      - ShellCommand:
          <<: *generate_report_over_ssh
          env:
            <<: *_env_generate_report_over_ssh
            REPORT_OWNER: cloud-user
            REPORT_GROUP: cloud-user
      - ShellCommand:
          <<: *collect_report_over_ssh
          env:
            <<: *_env_collect_report_over_ssh
            STEP_NAME: single-node-install-rhel
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_install_single-node_junit_info
            STEP_NAME: single-node-install-rhel
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: single-node-install-rhel
      - ShellCommand:
          <<: *terraform_destroy
          env: *_env_terraform_single_node_rhel

  lifecycle-patch-version:
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set promoted version type to patch
          property: promoted_version_type
          value: patch
      - SetPropertyFromCommand:
          name: Set previous patch version to upgrade from and downgrade to
          property: product_promoted_version
          command: >
              major=$(echo "%(prop:product_version)s" | cut -d'.' -f1) &&
              minor=$(echo "%(prop:product_version)s" | cut -d'.' -f2) &&
              patch=$(echo "%(prop:product_version)s" | cut -d'.' -f3) &&
              echo "$major.$minor.$(( patch>0 ? patch-1 : 0 ))"
      - SetPropertyFromCommand:
          name: Set the patch version flag
          property: patch_present
          env:
            PRODUCT_VERSION: "%(prop:product_version)s"
            PRODUCT_VERSION_PREV_patch: "%(prop:product_promoted_version)s"
          command: |-
              if [ "$PRODUCT_VERSION" != "$PRODUCT_VERSION_PREV_patch" ]; then
                echo "true"
              else
                echo "false"
              fi
      - TriggerStages:
          name: Trigger upgrade stages with patch Artifact ISO
          doStepIf: "%(prop:patch_present)s"
          stage_names:
            - snapshot-single-node-upgrades
            - single-node-downgrade-promoted-centos

  lifecycle-minor-version:
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set promoted version type to minor
          property: promoted_version_type
          value: minor
      - Git: *git_pull
      - SetPropertyFromCommand:
          name: Set previous minor version to upgrade from and downgrade to
          property: product_promoted_version
          command: >
              major=$(echo "%(prop:product_version)s" | cut -d'.' -f1) &&
              minor=$(echo "%(prop:product_version)s" | cut -d'.' -f2) &&
              git tag --list "$major.$(( $minor-1 )).*" | tail -1
      - SetPropertyFromCommand:
          name: Set the minor version flag
          property: minor_present
          env:
            PRODUCT_VERSION_PREV_patch: "%(prop:product_promoted_version)s"
          command: |-
              if [ -z "$PRODUCT_VERSION_PREV_patch" ]; then
                echo "false"
              else
                echo "true"
              fi
      - TriggerStages:
          name: Trigger upgrade stages with minor Artifact ISO
          doStepIf: "%(prop:minor_present)s"
          stage_names:
            - snapshot-single-node-upgrades
            - snapshot-multi-node-upgrades
            # Cannot downgrade from a 3.4 etcd cluster to 3.3
            #- single-node-downgrade-promoted-centos

  snapshot-single-node-upgrades:
    # NOTE: This stage just set `environment_type` property to
    # `single node` and trigger all upgrade single nodes stages
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set environment type to single node
          property: environment_type
          value: single node
      - TriggerStages:
          name: Trigger single-node upgrade stages
          stage_names:
            - snapshot-simple-environment-upgrade

  snapshot-multi-node-upgrades:
    # NOTE: This stage just set `environment_type` property to
    # `multi node` and trigger all upgrade multi nodes stages
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set environment type to multi node
          property: environment_type
          value: multi node
      - TriggerStages:
          name: Trigger multi-node upgrade stages
          stage_names:
            - snapshot-3-nodes-upgrade


  snapshot-simple-environment-upgrade:
    # NOTE: This stage just set `environment_name` property to
    # `simple environment` and trigger the real upgrade tests
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set environment name to simple environment
          property: environment_name
          value: simple environment
      - TriggerStages:
          name: Trigger simple environment upgrade stage
          stage_names:
            - snapshot-upgrade

  snapshot-3-nodes-upgrade:
    # NOTE: This stage just set `environment_name` property to
    # `simple environment` and trigger the real upgrade tests
    worker:
      type: local
    steps:
      - SetProperty:
          name: Set nodes count to 2 (bootstrap + 2 nodes)
          property: nodes_count
          value: "2"
      - SetProperty:
          name: Set environment name to 3 nodes
          property: environment_name
          value: "3 nodes"
      - TriggerStages:
          name: Trigger 3 node upgrade stage
          stage_names:
            - snapshot-upgrade

  # --- Upgrade from snapshot ---
  # NOTE: This stage do every kind of upgrade from snapshot
  # argument come from property
  # Mandatory:
  # - product_promoted_version  (MetalK8s version to start upgrade)
  # - environment_type          (Type of environment e.g.: single node)
  # - environment_name          (Name of environment e.g.: simple environment)
  # Optional:
  # - os                        (Operating system, default: centos-7)
  # - promoted_version_type     ("patch" or "minor", default: unknown)
  # - nodes_count               (Number of nodes to spawn, default: 0)
  # Snapshot need to be named:
  # - "metalk8s-<product_promoted_version>-<os>-<environement_type>-<environment_name>-bootstrap"
  # - "metalk8s-<product_promoted_version>-<os>-<environement_type>-<environment_name>-node-X"
  snapshot-upgrade:
    _metalk8s_internal_info:
      junit_info: &_snapshot_upgrade_junit_info
        TEST_SUITE: upgrade
        # NOTE: promoted_version_type should be "patch" or "minor"
        CLASS_NAME: "%(prop:promoted_version_type:-unknown)s.%(prop:environment_type)s.%(prop:os:-centos-7)s"
        TEST_NAME: "%(prop:environment_name)s"
    simultaneous_build: 20
    worker: *terraform_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_snapshot_upgrade_junit_info
            STEP_NAME: "%(prop:environment_type)s-%(prop:environment_name)s-upgrade-%(prop:promoted_version_type:-unknown)s-%(prop:os:-centos-7)s"
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      # --- Get ISO for version N ---
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      # --- Terraform stuff ---
      - ShellCommand: *terraform_install
      - ShellCommand: *terraform_install_check
      - ShellCommand: *terraform_init
      - ShellCommand: *terraform_validate
      - ShellCommand:
          <<: *terraform_apply
          env: &_env_terraform_upgrade
            <<: *_env_terraform
            TF_VAR_restore_env: "%(prop:product_promoted_version)s-%(prop:os:-centos-7)s-%(prop:environment_type)s-%(prop:environment_name)s"
            TF_VAR_nodes_count: "%(prop:nodes_count:-0)s"
            TF_VAR_os: "%(prop:os:-centos-7)s"
            TF_VAR_rhsm_username: "%(secret:rhel_ci_login)s"
            TF_VAR_rhsm_password: "%(secret:rhel_ci_password)s"
      # --- Wait for all pods to be running ---
      - ShellCommand:
          <<: *wait_pods_running_ssh
          # NOTE: Do not use `wait_pods_running_ssh` directly as we need to
          # have a workaround to make sure all PVs are well recreated by
          # storage operator
          # Check https://github.com/scality/metalk8s/issues/2726
          # As workaround if `wait_pods_status` failed just restart salt-minion
          # everywhere and `wait_pods_status` again
          command: >
            git checkout "%(prop:branch)s" &&
            scp -F ssh_config "%(prop:builddir)s/build/eve/wait_pods_status.sh" bootstrap:/tmp/ &&
            ssh -F ssh_config bootstrap sudo bash -c "
            /tmp/wait_pods_status.sh --sleep-time 5 --stabilization-time 30 --status Running
            --retry 30 || (crictl exec -it
            \$(sudo crictl ps -q --label io.kubernetes.pod.namespace=kube-system
            --label io.kubernetes.container.name=salt-master --state Running)
            salt '*' cmd.run_bg 'salt-call --local service.restart salt-minion' &&
            sleep 10 &&
            /tmp/wait_pods_status.sh --sleep-time 5 --stabilization-time 30 --status Running
            --retry 30)"
      # --- We do not need to Test promoted version ---
      # --- Upgrade to version N ---
      - ShellCommand: *copy_iso_bootstrap_ssh
      - ShellCommand:
          <<: *add_archive_ssh
          env:
            <<: *_env_add_archive_ssh
            PRODUCT_VERSION: "%(prop:product_promoted_version)s"
      - ShellCommand:
          name: Run upgrade from promoted version
          command: >
            ssh -F ssh_config bootstrap "
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/upgrade.sh
            --verbose"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          <<: *provision_volumes_ssh
          env:
            <<: *_env_provision_volumes
            PRODUCT_MOUNT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
            PRODUCT_TXT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s/product.txt"
      - ShellCommand: *wait_pods_running_ssh
      # --- Test version N ---
      - ShellCommand: *git_pull_ssh
      - ShellCommand:
          <<: *bastion_fast_tests
          env:
            <<: *_env_bastion_fast_tests
            ISO_MOUNTPOINT: "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
      # --- Collect logs ---
      - ShellCommand: *generate_report_over_ssh
      - ShellCommand:
          <<: *collect_report_over_ssh
          env:
            <<: *_env_collect_report_over_ssh
            STEP_NAME: "%(prop:environment_type)s-%(prop:environment_name)s-upgrade-%(prop:promoted_version_type:-unknown)s-%(prop:os:-centos-7)s"
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_snapshot_upgrade_junit_info
            STEP_NAME: "%(prop:environment_type)s-%(prop:environment_name)s-upgrade-%(prop:promoted_version_type:-unknown)s-%(prop:os:-centos-7)s"
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: "%(prop:environment_type)s-%(prop:environment_name)s-upgrade-%(prop:promoted_version_type:-unknown)s-%(prop:os:-centos-7)s"
      - ShellCommand:
          <<: *terraform_destroy
          env: *_env_terraform_upgrade

  # --- Downgrade for promoted versions ---
  single-node-downgrade-promoted-centos:
    _metalk8s_internal_info:
      junit_info: &_downgrade_promoted_single-node_junit_info
        TEST_SUITE: downgrade
        CLASS_NAME: "%(prop:promoted_version_type)s.single node.centos7"
        TEST_NAME: simple environment
    simultaneous_builds: 20
    worker: *single_node_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_downgrade_promoted_single-node_junit_info
            STEP_NAME: "single-node-downgrade-%(prop:promoted_version_type)s-centos"
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      # --- Get ISO for version N ---
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      # --- Get ISO for promoted version from Artefacts ---
      - ShellCommand:
          <<: *retrieve_iso_checksum
          name: Retrieve promoted ISO image checksum
          env: &_env_promoted_artifacts
            DEST_DIR: "/tmp"
            BASE_URL: "http://artifacts/builds/github:scality:metalk8s:\
                      promoted-%(prop:product_promoted_version)s"
      - ShellCommand:
          <<: *retrieve_iso
          name: Retrieve promoted ISO image
          env:
            <<: *_env_retrieve_artifact_retry
            <<: *_env_promoted_artifacts
      - ShellCommand:
          <<: *check_iso_checksum
          name: Check promoted ISO image with checksum
          workdir: "/tmp"
      # --- Prepare for Bootstrap with version N ---
      - ShellCommand: *create_mountpoint
      - ShellCommand: *mount_iso
      - ShellCommand: *bootstrap_config
      # --- Install version N ---
      - ShellCommand: *run_bootstrap
      - ShellCommand: *provision_prometheus_volumes
      - ShellCommand: *wait_pods_running
      # --- Test version N ---
      - ShellCommand: *fast_tests
      # --- Downgrade to promoted version ---
      - ShellCommand:
          <<: *add_archive
          name: Add previous ISO to cluster
          env:
            <<: *_env_add_archive
            ISO_PATH: /tmp/metalk8s.iso
      - ShellCommand:
          name: Run downgrade to promoted version
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_version)s/downgrade.sh
            --destination-version %(prop:product_promoted_version)s --verbose
          haltOnFailure: true
      - ShellCommand: *wait_pods_running
      # --- Test promoted version ---
      - ShellCommand:
          <<: *local_tests
          name: Run fast tests locally for promoted version
          env:
            <<: *_env_fast_tests
            BRANCH: "%(prop:product_promoted_version)s"
            ISO_MOUNTPOINT: >
              /srv/scality/metalk8s-%(prop:product_promoted_version)s
      # --- Collect logs ---
      - ShellCommand: *collect_sosreport
      - ShellCommand:
          <<: *copy_report_artifacts
          env:
            DEST_DIR: sosreport/sosreport/single-node-downgrade-%(prop:promoted_version_type)s-centos
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_downgrade_promoted_single-node_junit_info
            STEP_NAME: "single-node-downgrade-%(prop:promoted_version_type)s-centos"
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: "single-node-downgrade-%(prop:promoted_version_type)s-centos"

  multiple-nodes-centos:
    _metalk8s_internal_info:
      junit_info: &_install_multi-node_junit_info
        TEST_SUITE: install
        CLASS_NAME: multi node.centos7
        TEST_NAME: 1 bootstrap 1 master,etcd
    simultaneous_builds: 20
    worker: *terraform_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_install_multi-node_junit_info
            STEP_NAME: multiple-nodes-centos
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand:
          name: Check if unzip and curl are installed
          command: |-
            if ! unzip -h 2&> /dev/null; then
              echo "aborting - unzip not installed and required" >&2
              exit 1
            fi
            if ! curl -h 2&> /dev/null; then
              echo "aborting - curl not installed and required" >&2
              exit 1
            fi
          haltOnFailure: true
      - ShellCommand: *terraform_install
      - ShellCommand: *terraform_install_check
      - ShellCommand: *terraform_init
      - ShellCommand: *terraform_validate
      - ShellCommand:
          <<: *terraform_apply
          env: &_env_terraform_multi_node
            <<: *_env_terraform
            TF_VAR_nodes_count: "1"
      - ShellCommand: &check_ssh_config_bootstrap
          name: Check SSH config for bootstrap node
          command: |-
            if [ ! -f ssh_config ]; then
              echo "Missing SSH config file" >&2
              exit 1
            fi
            for _ in $(seq 1 12); do
              sleep 5
              ssh -F ssh_config bootstrap id && break
            done;
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand: &copy_bastion_priv_key_to_bootstrap
          # FIXME: find a cleaner way with Terraform.
          name: Send bastion private key to bootstrap
          command: >
              ssh -F ssh_config bootstrap "sudo mkdir -p /etc/metalk8s/pki/" &&
              scp -F ssh_config -3 bastion:.ssh/bastion bootstrap:./         &&
              ssh -F ssh_config bootstrap "sudo cp bastion /etc/metalk8s/pki/"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand: *set_bootstrap_minion_id_ssh
      - ShellCommand:
          name: Create /archives directory
          command: >
            ssh -F ssh_config bootstrap '
              sudo mkdir /archives && sudo chown $USER: /archives
            '
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          <<: *bootstrap_config_ssh
          env:
            <<: *_env_bootstrap_config_ssh
            ARCHIVE: /archives/metalk8s.iso
      - ShellCommand:
          <<: *copy_iso_bootstrap_ssh
          env:
            <<: *_env_copy_iso_bootstrap_ssh
            DEST: /archives/metalk8s.iso
      - ShellCommand: *create_mountpoint_ssh
      - ShellCommand:
          <<: *mount_iso_ssh
          env:
            <<: *_env_mount_iso_ssh
            ARCHIVE: /archives/metalk8s.iso
      - ShellCommand: *run_bootstrap_ssh
      - ShellCommand: &install_kubectl_bootstrap_ssh
          name: Install kubectl on the boostrap node
          command: >
            ssh -F ssh_config bootstrap
            sudo yum install -y kubectl --disablerepo=*
            --enablerepo=metalk8s-kubernetes
          workdir: build/eve/workers/openstack-terraform/terraform/
      - ShellCommand: *git_pull_ssh
      - ShellCommand: &wait_kube_system_pods_running_ssh
          <<: *wait_pods_running_ssh
          name: Wait for "kube-system" Pods to be in running state
          env:
            <<: *_env_wait_pods_running_ssh
            EXTRA_OPTS: "--namespace kube-system"
      - ShellCommand:
          <<: *bastion_tests
          name: Run installation scenarii on the bastion
          env:
            <<: *_env_bastion_tests
            PYTEST_FILTERS: "install and ci and multinodes and not node2"
      - ShellCommand: &provision_volumes_on_node1
          <<: *provision_volumes_ssh
          env:
            <<: *_env_provision_volumes
            NODE_NAME: node-1
      - ShellCommand: *wait_pods_running_ssh
      - ShellCommand: &multi_node_fast_tests
          <<: *bastion_tests
          name: Run fast tests on Bastion
          env:
            <<: *_env_bastion_tests
            PYTEST_FILTERS: "post and ci and not slow"
      - ShellCommand: &multi_node_slow_tests
          <<: *bastion_tests
          name: Run slow tests on Bastion
          env:
            <<: *_env_bastion_tests
            PYTEST_ARGS: "--suppress-no-test-exit-code"
            PYTEST_FILTERS: >
              post and ci and slow and not bootstrap and not restore
      - ShellCommand:
          <<: *generate_report_over_ssh
          env:
            <<: *_env_generate_report_over_ssh
            HOSTS_LIST: "bootstrap node-1"
      - ShellCommand:
          <<: *collect_report_over_ssh
          env:
            <<: *_env_collect_report_over_ssh
            HOSTS_LIST: "bootstrap node-1"
            STEP_NAME: multiple-nodes-centos
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_install_multi-node_junit_info
            STEP_NAME: multiple-nodes-centos
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          timeout: 14400
          env:
            STEP_NAME: multiple-nodes-centos
            DURATION: "14400"
      - ShellCommand:
          <<: *terraform_destroy
          env: *_env_terraform_multi_node

  bootstrap-restore:
    _metalk8s_internal_info:
      junit_info: &_bootstrap_restore_junit_info
        TEST_SUITE: install
        CLASS_NAME: multi node.centos7
        TEST_NAME: bootstrap restore
      simultaneous_builds: 20
    worker: *terraform_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_bootstrap_restore_junit_info
            STEP_NAME: bootstrap-restore
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand: *terraform_install
      - ShellCommand: *terraform_install_check
      - ShellCommand: *terraform_init
      - ShellCommand: *terraform_validate
      - ShellCommand:
          <<: *terraform_apply
          env: &_env_terraform_bootstrap_restore
            <<: *_env_terraform
            TF_VAR_nodes_count: "2"
      - ShellCommand: *check_ssh_config_bootstrap
      - ShellCommand: *copy_bastion_priv_key_to_bootstrap
      - ShellCommand: *set_bootstrap_minion_id_ssh
      - ShellCommand: *bootstrap_config_ssh
      - ShellCommand: *copy_iso_bootstrap_ssh
      - ShellCommand: *create_mountpoint_ssh
      - ShellCommand: *mount_iso_ssh
      - ShellCommand: *run_bootstrap_ssh
      - ShellCommand: *git_pull_ssh
      - ShellCommand: *wait_kube_system_pods_running_ssh
      - ShellCommand:
          <<: *bastion_tests
          name: Run installation scenario on the bastion
          env:
            <<: *_env_bastion_tests
            PYTEST_FILTERS: "install and ci and multinodes"
      - ShellCommand: *provision_volumes_on_node1
      - ShellCommand: *wait_pods_running_ssh
      - ShellCommand: *multi_node_fast_tests
      - ShellCommand: *multi_node_slow_tests
      - SetPropertyFromCommand:
          name: Set bootstrap backup archive property
          property: bootstrap_backup_archive
          command: >
            ssh -F ssh_config bootstrap
            "sudo find /var/lib/metalk8s -name 'backup_*.tar.gz'
            -printf '%f\n' | sort | tail -n1"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Retrieve the backup archive from the bootstrap node
          command: >
            scp -F ssh_config
            bootstrap:"/var/lib/metalk8s/%(prop:bootstrap_backup_archive)s"
            /tmp
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Destroy the bootstrap node
          env: *_env_terraform_bootstrap_restore
          command: >
            terraform destroy -auto-approve
            -target openstack_compute_instance_v2.bootstrap
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - SetPropertyFromCommand:
          name: Set node-1 etcd container id
          property: node-1_etcd_container_id
          command: >
            ssh -F ssh_config node-1
            sudo crictl ps -q --label io.kubernetes.pod.namespace=kube-system
            --label io.kubernetes.container.name=etcd --state Running
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - SetPropertyFromCommand:
          name: Set boostrap node etcd member id
          property: bootstrap_etcd_member_id
          command: >
            ssh -F ssh_config node-1
            sudo crictl exec -i "%(prop:node-1_etcd_container_id)s" sh -c \"
            ETCDCTL_API=3 etcdctl --endpoints https://127.0.0.1:2379
            --cert /etc/kubernetes/pki/etcd/server.crt
            --key /etc/kubernetes/pki/etcd/server.key
            --cacert /etc/kubernetes/pki/etcd/ca.crt
            member list\" | awk -F ', ' '$3 ~ "bootstrap" { print $1 }'
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Remove bootstrap node from etcd members
          command: >
            ssh -F ssh_config node-1
            sudo crictl exec -i "%(prop:node-1_etcd_container_id)s" sh -c \"
            ETCDCTL_API=3 etcdctl --endpoints https://127.0.0.1:2379
            --cert /etc/kubernetes/pki/etcd/server.crt
            --key /etc/kubernetes/pki/etcd/server.key
            --cacert /etc/kubernetes/pki/etcd/ca.crt
            member remove %(prop:bootstrap_etcd_member_id)s\"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Remove bootstrap node object
          command: >
            ssh -F ssh_config node-1
            sudo kubectl --kubeconfig=/etc/kubernetes/admin.conf delete
            node --selector="node-role.kubernetes.io/bootstrap"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Create a new bootstrap node
          env: *_env_terraform_bootstrap_restore
          command:
            terraform apply -auto-approve -refresh
            -target openstack_compute_instance_v2.bootstrap
            -target null_resource.copy_bastion_pub_to_bootstrap
            -target null_resource.ssh_config
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          name: Copy the backup archive to the new bootstrap node
          command: >
            scp -F ssh_config
            "/tmp/%(prop:bootstrap_backup_archive)s" bootstrap:/tmp
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          <<: *copy_iso_bootstrap_ssh
          name: Copy ISO to the new bootstrap node
      - ShellCommand:
          <<: *create_mountpoint_ssh
          name: Create mountpoint on the new bootstrap node
      - ShellCommand:
          <<: *mount_iso_ssh
          name: Mount ISO image on the new bootstrap node
      - ShellCommand:
          <<: *bastion_tests
          name: Run restore tests on the bastion
          # NOTE: Increase timeout as restore may take some time
          # Since we use pytest we do not have any output until restore totaly
          # finished
          timeout: 1800
          env:
            <<: *_env_bastion_tests
            PYTEST_FILTERS: "restore"
            BOOTSTRAP_BACKUP_ARCHIVE: "/tmp/%(prop:bootstrap_backup_archive)s"
      - ShellCommand: *wait_pods_running_ssh
      - ShellCommand: *multi_node_fast_tests
      - ShellCommand: *multi_node_slow_tests
      - ShellCommand:
          <<: *generate_report_over_ssh
          env:
            <<: *_env_generate_report_over_ssh
            HOSTS_LIST: "bootstrap node-1 node-2"
      - ShellCommand:
          <<: *collect_report_over_ssh
          env:
            <<: *_env_collect_report_over_ssh
            HOSTS_LIST: "bootstrap node-1 node-2"
            STEP_NAME: bootstrap-restore
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_bootstrap_restore_junit_info
            STEP_NAME: bootstrap-restore
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          timeout: 14400
          env:
            STEP_NAME: bootstrap-restore
            DURATION: "14400"
      - ShellCommand:
          <<: *terraform_destroy
          env: *_env_terraform_bootstrap_restore

  single-node-solutions:
    _metalk8s_internal_info:
      junit_info: &_solutions_single-node_junit_info
        TEST_SUITE: install
        CLASS_NAME: single node.centos7
        TEST_NAME: solutions
    simultaneous_builds: 20
    worker: *terraform_worker
    steps:
      - Git: *git_pull
      - ShellCommand:
          <<: *add_final_status_artifact_failed
          env:
            <<: *_env_final_status_artifact_failed
            <<: *_solutions_single-node_junit_info
            STEP_NAME: single-node-solutions
      - ShellCommand: *setup_cache
      - ShellCommand: *ssh_ip_setup
      - ShellCommand: *retrieve_iso
      - ShellCommand: *retrieve_iso_checksum
      - ShellCommand: *check_iso_checksum
      - ShellCommand: *terraform_install
      - ShellCommand: *terraform_install_check
      - ShellCommand: *terraform_init
      - ShellCommand: *terraform_validate
      - ShellCommand:
          <<: *terraform_apply
          env: &_env_terraform_single_node_solutions
            <<: *_env_terraform
            TF_VAR_nodes_count: "0"
      - ShellCommand: *set_bootstrap_minion_id_ssh
      - ShellCommand: *bootstrap_config_ssh
      - ShellCommand: *copy_iso_bootstrap_ssh
      - ShellCommand: *create_mountpoint_ssh
      - ShellCommand: *mount_iso_ssh
      - ShellCommand: *run_bootstrap_ssh
      - ShellCommand: *provision_volumes_ssh
      - ShellCommand: *install_kubectl_bootstrap_ssh
      - ShellCommand: *wait_pods_running_ssh
      - SetPropertyFromCommand: *set_example_solution_version
      - SetPropertyFromCommand:
          name: Set Example Solution version next property
          property: example_solution_version_next
          command: >
            eval $(bash -c '
            . examples/metalk8s-solution-example/VERSION &&
            sed "s/^VERSION_PATCH=.*$/VERSION_PATCH=$(( ++VERSION_PATCH ))/"
            examples/metalk8s-solution-example/VERSION') &&
            echo "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX"
      - ShellCommand:
          <<: *retrieve_iso
          name: Retrieve Solution example-solution ISO image
          env:
            <<: *_env_retrieve_artifact_retry
            FILE_SOURCE: >-
              example-solution-%(prop:example_solution_version)s.iso
            FILE_DEST: example-solution.iso
            BASE_URL: "%(prop:artifacts_private_url)s"
      - ShellCommand:
          <<: *retrieve_iso
          name: Retrieve Solution next example-solution ISO image
          env:
            <<: *_env_retrieve_artifact_retry
            FILE_SOURCE: >-
              example-solution-%(prop:example_solution_version_next)s.iso
            FILE_DEST: example-solution-next.iso
            BASE_URL: "%(prop:artifacts_private_url)s"
      - ShellCommand:
          name: Copy Solutions ISOs to bootstrap node
          command: >
            scp -F ssh_config
            "%(prop:builddir)s/build/example-solution.iso"
            "%(prop:builddir)s/build/example-solution-next.iso"
            "bootstrap:/var/tmp"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand: *git_pull_ssh
      - ShellCommand:
          <<: *bastion_tests
          name: Run Solutions CLI tests on Bastion
          env:
            <<: *_env_bastion_tests
            PYTEST_FILTERS: "solution"
      - SetPropertyFromCommand: *set_bootstrap_cp_ip_ssh
      - ShellCommand: &import_solution_archive_ssh
          name: Import Solution example-solution archive
          env:
            SOLUTION_ARCHIVE: /var/tmp/example-solution.iso
          command: >
            ssh -F ssh_config bootstrap
            sudo /var/tmp/metalk8s/solutions.sh
            import --archive "$SOLUTION_ARCHIVE"
          workdir: build/eve/workers/openstack-terraform/terraform/
          haltOnFailure: true
      - ShellCommand:
          <<: *import_solution_archive_ssh
          name: Import Solution next example-solution archive
          env:
            SOLUTION_ARCHIVE: /var/tmp/example-solution-next.iso
      - ShellCommand:
          <<: *bastion_ui_tests
          name: Run Solutions UI tests
          env:
            <<: *_env_bastion_ui_tests
            TEST_FILTER: "e2esolutions"
      - ShellCommand: *collect_cypress_result_ssh
      - Upload: *upload_cypress_artifacts
      - ShellCommand: *generate_report_over_ssh
      - ShellCommand:
          <<: *collect_report_over_ssh
          env:
            <<: *_env_collect_report_over_ssh
            STEP_NAME: single-node-solutions
      - Upload: *upload_report_artifacts
      - ShellCommand:
          <<: *add_final_status_artifact_success
          env:
            <<: *_env_final_status_artifact_success
            <<: *_solutions_single-node_junit_info
            STEP_NAME: single-node-solutions
      - Upload: *upload_final_status_artifact
      - ShellCommand:
          <<: *wait_debug
          env:
            STEP_NAME: single-node-solutions
      - ShellCommand:
          <<: *terraform_destroy
          env: *_env_terraform_single_node_solutions
