version: '0.2'
branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*, documentation/*, release/*:
    stage: pre-merge
stages:
  pre-merge:
    worker:
      type: local
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED'
        command: mkdir -p build_status/build_status && echo 'FAILED' > build_status/build_status/.final_status
        haltOnFailure: true
        hideStepIf: true
    - TriggerStages:
        name: Trigger build, docs, and lint stages
        stage_names:
        - build
        - docs
        - lint
        haltOnFailure: true
    - SetPropertyFromCommand:
        name: Set version as property from built artifacts
        property: metalk8s_version
        command: bash -c '. <(curl -s "%(prop:artifacts_private_url)s/product.txt")
          && echo $VERSION'
        haltOnFailure: true
    - TriggerStages:
        name: Trigger single-node and multiple-nodes steps with built ISO
        stage_names:
        - single-node
        - multiple-nodes
        haltOnFailure: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL'
        command: mkdir -p build_status/build_status && echo 'SUCCESSFUL' > build_status/build_status/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: &id001 build_status
        alwaysRun: true
        hideStepIf: true
  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for build
        command: mkdir -p build_status/build_status/build && echo 'FAILED' > build_status/build_status/build/.final_status
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Wait for Docker daemon to be ready
        command: bash -c 'for i in $(seq 1 150); do;   docker info &> /dev/null &&
          exit;   sleep 2; done; echo "Could not reach Docker daemon from Buildbot
          worker" >&2; exit 1'
        haltOnFailure: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build everything
        command: ./doit.sh -n 4
        haltOnFailure: true
        env:
          PYTHON_SYS: python3.6
        usePTY: true
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in _build/metalk8s.iso _build/SHA256SUM
          _build/root/product.txt; do cp -r "$artifact" artifacts; done
    - Upload:
        name: Upload artifacts
        source: &id002 artifacts
        urls:
        - metalk8s.iso
        - SHA256SUM
        - product.txt
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for build
        command: mkdir -p build_status/build_status/build && echo 'SUCCESSFUL' > build_status/build_status/build/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  docs:
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: .
          dockerfile: docs/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for docs
        command: mkdir -p build_status/build_status/docs && echo 'FAILED' > build_status/build_status/docs/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
    - ShellCommand:
        name: Build documentation
        command: tox --workdir /tmp/tox -e docs -- html latexpdf
        haltOnFailure: true
        env:
          READTHEDOCS: 'True'
    - ShellCommand:
        name: Copy artifacts for 'docs'
        command: mkdir -p artifacts/docs; for artifact in docs/_build/*; do cp -r
          "$artifact" artifacts/docs; done
    - Upload:
        name: Upload artifacts
        source: *id002
        urls:
        - docs/html/index.html
        - docs/latex/MetalK8s.pdf
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for docs
        command: mkdir -p build_status/build_status/docs && echo 'SUCCESSFUL' > build_status/build_status/docs/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for lint
        command: mkdir -p build_status/build_status/lint && echo 'FAILED' > build_status/build_status/lint/.final_status
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for lint
        command: mkdir -p build_status/build_status/lint && echo 'SUCCESSFUL' > build_status/build_status/lint/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  single-node:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'FAILED' >
          build_status/build_status/single-node/.final_status
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'SUCCESSFUL'
          > build_status/build_status/single-node/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  multiple-nodes:
    worker:
      type: openstack
      path: eve/workers/openstack-multiple-nodes
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'FAILED'
          > build_status/build_status/multiple-nodes/.final_status
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'SUCCESSFUL'
          > build_status/build_status/multiple-nodes/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
