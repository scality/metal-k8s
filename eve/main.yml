version: '0.2'
branches:
  user/*, feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*, documentation/*, release/*:
    stage: pre-merge
stages:
  pre-merge:
    worker:
      type: local
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED'
        command: mkdir -p build_status/build_status && echo 'FAILED' > build_status/build_status/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Compute stages to debug
        command: bash eve/scripts/mark-for-debug.sh
        haltOnFailure: true
        hideStepIf: true
        env:
          DEBUG_PROPERTY: '%(prop:debug)s'
          DEBUG_STAGES: single-node multiple-nodes
    - SetPropertyFromCommand:
        name: Mark stage 'single-node' for debugging
        property: run_debug_single_node
        command: bash -c '. ./.debug_stages && echo ${DEBUG_single_node:-false}'
        hideStepIf: true
    - SetPropertyFromCommand:
        name: Mark stage 'multiple-nodes' for debugging
        property: run_debug_multiple_nodes
        command: bash -c '. ./.debug_stages && echo ${DEBUG_multiple_nodes:-false}'
        hideStepIf: true
    - TriggerStages:
        name: Trigger build, docs, and lint stages
        stage_names:
        - build
        - docs
        - lint
        haltOnFailure: true
    - SetPropertyFromCommand:
        name: Set version as property from built artifacts
        property: metalk8s_version
        command: bash -c '. <(curl -s "%(prop:artifacts_private_url)s/product.txt")
          && echo $VERSION'
        haltOnFailure: true
    - TriggerStages:
        name: Trigger single-node and multiple-nodes steps with built ISO
        stage_names:
        - single-node
        - multiple-nodes
        haltOnFailure: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL'
        command: mkdir -p build_status/build_status && echo 'SUCCESSFUL' > build_status/build_status/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: &id001 build_status
        alwaysRun: true
        hideStepIf: true
  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for build
        command: mkdir -p build_status/build_status/build && echo 'FAILED' > build_status/build_status/build/.final_status
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Wait for Docker daemon to be ready
        command: bash -c 'for i in {1..150}; do docker info &> /dev/null && exit;
          sleep 2; done; echo "Could not reach Docker daemon from Buildbot worker"
          >&2; exit 1'
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Build everything
        command: ./doit.sh -n 4
        haltOnFailure: true
        env:
          PYTHON_SYS: python3.6
        usePTY: true
    - ShellCommand:
        name: Copy artifacts
        command: mkdir -p artifacts; for artifact in _build/metalk8s.iso _build/SHA256SUM
          _build/root/product.txt; do cp -r "$artifact" artifacts; done
    - Upload:
        name: Upload artifacts
        source: &id002 artifacts
        alwaysRun: true
        urls:
        - metalk8s.iso
        - SHA256SUM
        - product.txt
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for build
        command: mkdir -p build_status/build_status/build && echo 'SUCCESSFUL' > build_status/build_status/build/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  docs:
    worker:
      type: kube_pod
      path: eve/workers/pod-docs-builder/pod.yaml
      images:
        doc-builder:
          context: .
          dockerfile: docs/Dockerfile
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for docs
        command: mkdir -p build_status/build_status/docs && echo 'FAILED' > build_status/build_status/docs/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Build documentation
        command: tox --workdir /tmp/tox -e docs -- html latexpdf
        haltOnFailure: true
        env:
          READTHEDOCS: 'True'
    - ShellCommand:
        name: Copy artifacts for 'docs'
        command: mkdir -p artifacts/docs; for artifact in docs/_build/*; do cp -r
          "$artifact" artifacts/docs; done
    - Upload:
        name: Upload artifacts
        source: *id002
        alwaysRun: true
        urls:
        - docs/html/index.html
        - docs/latex/MetalK8s.pdf
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for docs
        command: mkdir -p build_status/build_status/docs && echo 'SUCCESSFUL' > build_status/build_status/docs/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for lint
        command: mkdir -p build_status/build_status/lint && echo 'FAILED' > build_status/build_status/lint/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Run all linting targets
        command: ./doit.sh lint
        haltOnFailure: false
        usePTY: true
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for lint
        command: mkdir -p build_status/build_status/lint && echo 'SUCCESSFUL' > build_status/build_status/lint/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  single-node:
    worker:
      type: openstack
      path: eve/workers/openstack-single-node
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.large
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'FAILED' >
          build_status/build_status/single-node/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "mkdir -p ~/.ssh; echo \"%(secret:ssh_pub_keys)s\" >> ~/.ssh/authorized_keys;\
          \ IP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet ([0-9.]+).*$/\\1/p'\
          \ ); echo \"Connect to this worker using:\n    ssh eve@$IP\""
    - ShellCommand:
        name: Retrieve ISO image and its checksum
        command: for file in SHA256SUM metalk8s.iso; do curl --retry 10 -O "%(prop:artifacts_private_url)s/$file";
          done
        haltOnFailure: true
        workdir: build
    - ShellCommand:
        name: Check ISO image with checksum
        command: sha256sum -c SHA256SUM
        haltOnFailure: true
    - ShellCommand:
        name: Create ISO mountpoint
        command: sudo mkdir -p "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: sudo mount -o loop "$(realpath metalk8s.iso)" "/srv/scality/metalk8s-%(prop:metalk8s_version)s"
        haltOnFailure: true
    - ShellCommand:
        name: Prepare Bootstrap before installation
        command: sudo env ARCHIVE_PATH=$(realpath metalk8s.iso) bash deploy/scripts/prepare-bootstrap.sh
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: sudo bash /srv/scality/metalk8s-%(prop:metalk8s_version)s/bootstrap.sh
          --verbose
        haltOnFailure: true
    - ShellCommand:
        name: Checkout required version before running tests
        command: git checkout "%(prop:branch)s" --quiet
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Run tests - fast
        command: env ISO_MOUNTPOINT=/srv/scality/metalk8s-%(prop:metalk8s_version)s
          tox -e tests-local -- -m "post and ci and not multinode and not slow"
        haltOnFailure: true
    - ShellCommand:
        name: Run tests - slow
        command: env ISO_MOUNTPOINT=/srv/scality/metalk8s-%(prop:metalk8s_version)s
          tox -e tests-local -- -m "post and ci and not multinode and slow"
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: sudo sosreport --all-logs -o metalk8s -kmetalk8s.podlogs=True -o
          containerd -kcontainerd.all=True -kcontainerd.logs=True --batch --tmp-dir
          /var/tmp && sudo chown eve:eve /var/tmp/sosreport*
    - ShellCommand:
        name: Copy artifacts for 'sosreport/single-node'
        command: mkdir -p artifacts/sosreport/single-node; for artifact in /var/tmp/sosreport*;
          do cp -r "$artifact" artifacts/sosreport/single-node; done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: echo "Waiting 3600 seconds" && sleep 3600
        alwaysRun: true
        doStepIf: '%(prop:run_debug_single_node)s'
        timeout: '3600'
    - Upload:
        name: Upload artifacts
        source: *id002
        alwaysRun: true
        urls:
        - sosreport/single-node
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for single-node
        command: mkdir -p build_status/build_status/single-node && echo 'SUCCESSFUL'
          > build_status/build_status/single-node/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
  multiple-nodes:
    worker:
      type: openstack
      path: eve/workers/openstack-multiple-nodes
      image: CentOS-7-x86_64-GenericCloud-1809.qcow2
      flavor: m1.medium
    steps:
    - ShellCommand:
        name: Set build status to 'FAILED' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'FAILED'
          > build_status/build_status/multiple-nodes/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Git:
        name: Git pull
        repourl: '%(prop:git_reference)s'
        method: clobber
        retryFetch: true
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Setup proxy cache
        command: curl -s http://proxy-cache/setup.sh | sudo sh && . /usr/local/bin/use_scality_proxy_cache
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Install SSH keys and report connection info
        command: "mkdir -p ~/.ssh; echo \"%(secret:ssh_pub_keys)s\" >> ~/.ssh/authorized_keys;\
          \ IP=$( ip -f inet addr show eth0 | sed -En 's/^.*inet ([0-9.]+).*$/\\1/p'\
          \ ); echo \"Connect to this worker using:\n    ssh eve@$IP\""
    - ShellCommand:
        name: Check if unzip and curl are installed
        command: if ! unzip -h 2&> /dev/null; then echo "Aborting - unzip not installed
          and required" >&2; exit 1; fi; if ! curl -h 2&> /dev/null; then echo "Aborting
          - curl not installed and required" >&2; exit 1; fi
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Download and install Terraform
        command: curl --retry 5 -O "https://releases.hashicorp.com/terraform/0.12.3/terraform_0.12.3_linux_amd64.zip"
          && sudo unzip "terraform_0.12.3_linux_amd64.zip" -d /usr/local/sbin/ &&
          rm -f "terraform_0.12.3_linux_amd64.zip"
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Check that Terraform was installed
        command: if ! terraform --version 2&> /dev/null; then echo "Aborting - Terraform
          not installed and required" >&2; exit 1; fi
        haltOnFailure: true
        hideStepIf: true
    - ShellCommand:
        name: Initialize Terraform
        command: for _ in $(seq 1 12); do terraform init && exit; rm -rf .terraform/;
          sleep 5; done
        haltOnFailure: true
        hideStepIf: true
        workdir: build/deploy
    - ShellCommand:
        name: Validate Terraform deployment description
        command: terraform validate
        haltOnFailure: true
        hideStepIf: true
        workdir: build/deploy
    - ShellCommand:
        name: Spawn OpenStack virtual infrastructure with Terraform
        command: terraform apply -auto-approve
        haltOnFailure: true
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
          TF_VAR_nodes_count: '2'
        workdir: build/deploy
    - ShellCommand:
        name: Retrieve ISO image and its checksum
        command: for file in SHA256SUM metalk8s.iso; do curl --retry 10 -O "%(prop:artifacts_private_url)s/$file";
          done; ssh -F deploy/ssh_config bootstrap mkdir -p /var/tmp/archives; for
          file in SHA256SUM metalk8s.iso; do scp -F deploy/ssh_config $file bootstrap:/var/tmp/archives/$file;
          done
        haltOnFailure: true
    - ShellCommand:
        name: Check ISO image with checksum
        command: ssh -F deploy/ssh_config bootstrap 'cd /var/tmp/archives && sha256sum
          -c SHA256SUM'
        haltOnFailure: true
    - ShellCommand:
        name: Create ISO mountpoint
        command: ssh -F deploy/ssh_config bootstrap 'sudo mkdir -p "/var/tmp/metalk8s"'
        haltOnFailure: true
    - ShellCommand:
        name: Mount ISO image
        command: ssh -F deploy/ssh_config bootstrap 'sudo mount -o loop "/var/tmp/archives/metalk8s.iso"
          "/var/tmp/metalk8s"'
        haltOnFailure: true
    - ShellCommand:
        name: Prepare Bootstrap before installation
        command: ssh -F deploy/ssh_config bootstrap [[ -f "deploy/scripts/prepare-bootstrap.sh"
          ]] || (ssh -F deploy/ssh_config bootstrap 'mkdir -p $(dirname deploy/scripts/prepare-bootstrap.sh)'
          && scp -F deploy/ssh_config deploy/scripts/prepare-bootstrap.sh bootstrap:deploy/scripts/prepare-bootstrap.sh)
          && ssh -F deploy/ssh_config bootstrap 'sudo env ARCHIVE_PATH=/var/tmp/archives/metalk8s.iso
          MINION_ID=bootstrap bash deploy/scripts/prepare-bootstrap.sh'
        haltOnFailure: true
    - ShellCommand:
        name: Start the bootstrap process
        command: ssh -F deploy/ssh_config bootstrap [[ -f "/var/tmp/metalk8s/bootstrap.sh"
          ]] || (ssh -F deploy/ssh_config bootstrap 'mkdir -p $(dirname /var/tmp/metalk8s/bootstrap.sh)'
          && scp -F deploy/ssh_config /var/tmp/metalk8s/bootstrap.sh bootstrap:/var/tmp/metalk8s/bootstrap.sh)
          && ssh -F deploy/ssh_config bootstrap 'sudo bash /var/tmp/metalk8s/bootstrap.sh
          --verbose'
        haltOnFailure: true
    - ShellCommand:
        name: Enable IP-in-IP encapsulation for Calico
        command: ssh -F deploy/ssh_config bootstrap [[ -f "/home/centos/scripts/enable_ipip.sh"
          ]] || (ssh -F deploy/ssh_config bootstrap 'mkdir -p $(dirname /home/centos/scripts/enable_ipip.sh)'
          && scp -F deploy/ssh_config /home/centos/scripts/enable_ipip.sh bootstrap:/home/centos/scripts/enable_ipip.sh)
          && ssh -F deploy/ssh_config bootstrap 'bash /home/centos/scripts/enable_ipip.sh'
    - ShellCommand:
        name: Prepare test sources on bastion
        command: git checkout "%(prop:branch)s" --quiet && tar cfp - tox.ini VERSION
          tests/ buildchain/buildchain/versions.py | ssh -F deploy/ssh_config bastion
          'tar xf -'
    - ShellCommand:
        name: Run tests - installation / expansion
        command: ssh -F deploy/ssh_config bastion 'env ISO_MOUNTPOINT=/var/tmp/metalk8s
          SSH_CONFIG_FILE=/home/centos/ssh_config tox -e tests -- -m "ci and multinodes
          and install"'
        haltOnFailure: true
    - ShellCommand:
        name: Run tests - fast
        command: ssh -F deploy/ssh_config bastion 'env ISO_MOUNTPOINT=/var/tmp/metalk8s
          SSH_CONFIG_FILE=/home/centos/ssh_config tox -e tests -- -m "ci and multinodes
          and post and not slow"'
        haltOnFailure: true
    - ShellCommand:
        name: Run tests - slow
        command: ssh -F deploy/ssh_config bastion 'env ISO_MOUNTPOINT=/var/tmp/metalk8s
          SSH_CONFIG_FILE=/home/centos/ssh_config tox -e tests -- -m "ci and multinodes
          and post and slow"'
        haltOnFailure: true
    - ShellCommand:
        name: Collect logs using sosreport
        command: ssh -F deploy/ssh_config bootstrap 'sudo sosreport --all-logs -o
          metalk8s -kmetalk8s.podlogs=True -o containerd -kcontainerd.all=True -kcontainerd.logs=True
          --batch --tmp-dir /var/tmp && sudo chown eve:eve /var/tmp/sosreport*'
    - ShellCommand:
        name: Copy artifacts for 'sosreport/single-multiple-nodes/bootstrap'
        command: mkdir -p artifacts/sosreport/single-multiple-nodes/bootstrap; for
          artifact in /var/tmp/sosreport*; do scp -F deploy/ssh_config -r bootstrap:$artifact
          artifacts/sosreport/single-multiple-nodes/bootstrap; done
    - ShellCommand:
        name: Collect logs using sosreport
        command: ssh -F deploy/ssh_config node1 'sudo sosreport --all-logs -o metalk8s
          -kmetalk8s.podlogs=True -o containerd -kcontainerd.all=True -kcontainerd.logs=True
          --batch --tmp-dir /var/tmp && sudo chown eve:eve /var/tmp/sosreport*'
    - ShellCommand:
        name: Copy artifacts for 'sosreport/single-multiple-nodes/node1'
        command: mkdir -p artifacts/sosreport/single-multiple-nodes/node1; for artifact
          in /var/tmp/sosreport*; do scp -F deploy/ssh_config -r node1:$artifact artifacts/sosreport/single-multiple-nodes/node1;
          done
    - ShellCommand:
        name: Debug step - wait before allowing resource destruction
        command: echo "Waiting 3600 seconds" && sleep 3600
        alwaysRun: true
        doStepIf: '%(prop:run_debug_multiple_nodes)s'
        timeout: '3600'
    - ShellCommand:
        name: Destroy Terraform-deployed infrastructure
        command: for _ in $(seq 1 3); do terraform destroy -auto-approve && break;
          done
        alwaysRun: true
        env:
          OS_AUTH_URL: '%(secret:scality_cloud_auth_url)s'
          OS_PASSWORD: '%(secret:scality_cloud_password)s'
          OS_REGION_NAME: '%(secret:scality_cloud_region)s'
          OS_TENANT_NAME: '%(secret:scality_cloud_tenant_name)s'
          OS_USERNAME: '%(secret:scality_cloud_username)s'
        workdir: build/deploy
        sigtermTime: 600
    - Upload:
        name: Upload artifacts
        source: *id002
        alwaysRun: true
        urls:
        - sosreport/multiple-nodes
    - ShellCommand:
        name: Set build status to 'SUCCESSFUL' for multiple-nodes
        command: mkdir -p build_status/build_status/multiple-nodes && echo 'SUCCESSFUL'
          > build_status/build_status/multiple-nodes/.final_status
        haltOnFailure: true
        hideStepIf: true
    - Upload:
        name: Upload final status to artifacts
        source: *id001
        alwaysRun: true
        hideStepIf: true
