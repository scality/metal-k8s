
- name: 'normalize drive name'
  set_fact:
    _drive_to_remove: >-
      {%- if not drive_to_remove or drive_to_remove.startswith('/') -%}
        {{ drive_to_remove }}
      {%- else -%}
        {{ '/dev/' ~ drive_to_remove }}
      {%- endif -%}
  # Reminder variable passed with -e has the higher priority.
  # Thus using another variable name

- debug:
    var: _drive_to_remove
  when: debug|bool

- name: 'assert drive is used in pv'
  assert:
    that:
    - "item in ansible_lvm.pvs"
  with_items:
    - '{{ _drive_to_remove }}'

- name: 'list of lv associated with the drive'
  command: >-
    pvs {{ _drive_to_remove }}
    -o lv_name -o+lv_dm_path
    --noheadings
  changed_when: False
  check_mode: False
  register: list_of_lv_command

- debug:
    var: list_of_lv_command
  when: debug|bool

- name: 'parse result'
  set_fact:
    lv_list: >-
      [ {%- for lv_line in list_of_lv_command.stdout_lines|map('trim')|list -%}
        {%- set line_split = lv_line.split(' ')|select|list -%}
        {%- if line_split|length == 2 -%}
            {%- set lv_name, dm_path = line_split -%}
            {{ {'lv_name': lv_name, 'dev_path': dm_path} }},
        {%- endif -%}
      {%- endfor -%} ]
    vg_name: >-
      {{ ansible_lvm.pvs[_drive_to_remove].vg }}

- debug:
    var: lv_list
  when: debug|bool

- debug:
    var: vg_name
  when: debug|bool

- debug:
    var: ansible_mounts
  when: debug|bool

- name: 'find mountpoints'
  set_fact:
    mountpoint_list: >-
      {%- set mountpoint_list = [] -%}
      {%- for lv in lv_list|map(attribute='dev_path') -%}
        {%- set _ = mountpoint_list.extend(
            ansible_mounts|selectattr('device', 'equalto', lv)
        ) -%}
      {%- endfor -%}
      {{ mountpoint_list }}

- debug:
    var: mountpoint_list
  when: debug|bool
