#!/bin/bash

set -e
set -u
# The trickery below is to only run `set -o pipefail`, which is a Bash'ism,
# when running in Bash and not some other `sh` which doesn't necessarily
# support `-o pipefail` (though must support `-e` and `-u` per POSIX).
if test -z "$(type -p)"; then set -o pipefail; fi

RPM=${RPM:-$(command -v rpm)}
SYSTEMCTL=${SYSTEMCTL:-$(command -v systemctl)}
YUM=${YUM:-$(command -v yum)}
SALT_CALL=${SALT_CALL:-salt-call}

SALT_MINION_FILE_CLIENT_LOCAL_CONF=/etc/salt/minion.d/99-file-client-local.conf
# shellcheck disable=SC2034
SALT_MASTER_FILE_CONF=/etc/salt/master.d/99-metalk8s.conf
# shellcheck disable=SC2034
SALT_MINION_FILE_CONF=/etc/salt/minion.d/99-metalk8s.conf

declare -A GPGCHECK_REPOSITORIES=(
    [metalk8s-base]=1
    [metalk8s-epel]=1
    [metalk8s-external]=0
    [metalk8s-extras]=1
    [metalk8s-updates]=1
    [metalk8s-kubernetes]=1
    [metalk8s-saltstack]=1
    [metalk8s-scality]=0
)

die() {
        echo 1>&2 "$@"
        exit 1
}

pre_minion_checks() {
        test "x$(whoami)" = "xroot" || die "Script must run as root"
        test -n "${RPM}" || die "rpm not found"
        test -x "${RPM}" || die "rpm at '${RPM}' is not executable"
        test -n "${SYSTEMCTL}" || die "systemctl not found"
        test -x "${SYSTEMCTL}" || die "systemctl at '${SYSTEMCTL}' is not executable"
        test -n "${YUM}" || die "yum not found"
        test -x "${YUM}" || die "yum at '${YUM}' is not executable"
}

disable_salt_minion_service() {
        ${SYSTEMCTL} disable salt-minion.service 2>/dev/null || true
}

stop_salt_minion_service() {
        ${SYSTEMCTL} stop salt-minion.service 2>/dev/null || true
}

configure_yum_repositories() {
    local -r repositories_pillar_path=/srv/scality/metalk8s-@@VERSION/pillar/repositories.sls
    local -g online_mode

    online_mode=$(awk '$1 == "online_mode:" { print $2 }' "$repositories_pillar_path")

    if [[ ${online_mode,,} = true ]]; then
        configure_salt_repository
    else
        configure_yum_local_repositories
    fi

    "$YUM" clean all
}

configure_salt_repository() {
    "$RPM" --import https://repo.saltstack.com/yum/redhat/7/x86_64/archive/2018.3.3/SALTSTACK-GPG-KEY.pub
    cat > /etc/yum.repos.d/saltstack.repo << EOF
[saltstack]
name=SaltStack repo for RHEL/CentOS \$releasever
baseurl=https://repo.saltstack.com/yum/redhat/\$releasever/\$basearch/archive/2018.3.3
enabled=1
gpgcheck=1
gpgkey=https://repo.saltstack.com/yum/redhat/\$releasever/\$basearch/archive/2018.3.3/SALTSTACK-GPG-KEY.pub
EOF
}

configure_yum_local_repositories() {
    for repository in "${!GPGCHECK_REPOSITORIES[@]}"; do
        configure_yum_local_repository "$repository" \
            "${GPGCHECK_REPOSITORIES[$repository]}"
    done
}

configure_yum_local_repository() {
    local -r repo_name=$1 gpgcheck=${2:-0}
    local -r repo_path=/srv/scality/metalk8s-@@VERSION/packages/$repo_name-el7
    local gpg_keys

    gpg_keys=$(
        find "$repo_path" -maxdepth 1 -name "RPM-GPG-KEY-*" \
	    -printf "file://%p "
    )

    cat > /etc/yum.repos.d/"$repo_name".repo << EOF
[$repo_name]
name=$repo_name
baseurl=file://$repo_path
enabled=0
gpgcheck=$gpgcheck
${gpg_keys:+gpgkey=${gpg_keys%?}}
EOF
}

install_salt_minion() {
    local -a yum_opts=(
        '--assumeyes'
    )

    if [[ ${online_mode,,} = false ]]; then
        yum_opts+=(
	    '--disablerepo=*'
	    '--enablerepo=metalk8s-*'
	)
    fi

    "$YUM" install "${yum_opts[@]}" salt-minion
}

configure_salt_minion_local_mode() {
    cat > "${SALT_MINION_FILE_CLIENT_LOCAL_CONF}" << EOF
file_roots:
  metalk8s-@@VERSION:
    - /srv/scality/metalk8s-@@VERSION/salt
pillar_roots:
  metalk8s-@@VERSION:
    - /srv/scality/metalk8s-@@VERSION/pillar

# use new module.run format
use_superseded:
  - module.run

ext_pillar:
  - metalk8s: /etc/metalk8s/bootstrap.yaml
EOF

  "$SALT_CALL" --local --retcode-passthrough saltutil.sync_all \
      saltenv=metalk8s-@@VERSION
}

run_bootstrap_prechecks() {
        return
}

install_python_kubernetes_client() {
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.python-kubernetes saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION pillar='{"repo": {"local_mode": True}}'
}

install_kubelet() {
    "$SALT_CALL" --local --retcode-passthrough state.apply metalk8s.kubelet \
        saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION \
	pillar='{"repo": {"local_mode": True}}'
}

run_preflight() {
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.preflight saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION pillar='{"repo": {"local_mode": True}}'
}

run_kubelet_start() {
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.kubelet-start saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

deploy_registry() {
    "$SALT_CALL" --local --retcode-passthrough saltutil.sync_all \
        saltenv=metalk8s-@@VERSION
    "$SALT_CALL" --local --retcode-passthrough state.apply metalk8s.registry \
        saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
}

populate_registry() {
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.registry.populated saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION pillar='{"repo": {"local_mode": True}}'
}

deploy_salt_master() {
    # Run deployment
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.salt.master saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

configure_salt() {
    "$SALT_CALL" --local --retcode-passthrough state.apply \
        metalk8s.salt.minion.configured saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
    rm -f "${SALT_MINION_FILE_CLIENT_LOCAL_CONF}"
}

accept_keys() {
    echo "Accepting keys"
    # shellcheck disable=SC2046
    crictl exec -i $(crictl ps -q --pod $(crictl pods --name salt-master\* -q)) salt-key -Ay
    sleep 5
}

set_salt_command() {
    echo "Setting salt master command"
    # shellcheck disable=SC2046
    SALT_MASTER_CALL="crictl exec -i $(crictl ps -q --pod $(crictl pods --name salt-master\* -q)) salt"
}

sync_salt() {
    $SALT_MASTER_CALL '*' saltutil.sync_all refresh=True \
        saltenv=metalk8s-@@VERSION
    local SALT_CONTAINER
    SALT_CONTAINER="$(crictl ps -q \
            --label io.kubernetes.pod.namespace=kube-system \
            --label io.kubernetes.container.name=salt-master \
            --state Running)"
    test -n "$SALT_CONTAINER"
    crictl exec -i "$SALT_CONTAINER" \
        salt-run saltutil.sync_all saltenv=metalk8s-@@VERSION
}

run_certs() {
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.ca saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.apiserver saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.apiserver-kubelet-client saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.sa saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.etcd-ca saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.etcd-healthcheck-client saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.etcd-peer saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.etcd-server saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.apiserver-etcd-client saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.front-proxy-ca saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.certs.front-proxy-client saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
}

run_kubeconfig() {
    "$SALT_CALL" --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.kubeconfig saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

run_control_plane() {
    "$SALT_CALL" --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.control-plane saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

run_etcd() {
    "$SALT_CALL" --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.etcd saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

run_mark_control_plane() {
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.kubeadm.init.mark-control-plane saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
}

install_addons() {
    "$SALT_CALL" --retcode-passthrough state.apply \
        metalk8s.kubeadm.init.addons saltenv=metalk8s-@@VERSION \
        pillarenv=metalk8s-@@VERSION
}

install_calico() {
    ${SALT_CALL} --retcode-passthrough state.apply metalk8s.calico saltenv=metalk8s-@@VERSION pillarenv=metalk8s-@@VERSION
}


main() {
    pre_minion_checks
    disable_salt_minion_service
    stop_salt_minion_service
    configure_yum_repositories
    install_salt_minion
    configure_salt_minion_local_mode
    run_bootstrap_prechecks
    install_python_kubernetes_client

    install_kubelet
    run_preflight
    run_kubelet_start

    deploy_registry
    populate_registry

    deploy_salt_master
    configure_salt

    set_salt_command
    accept_keys

    sync_salt
    run_certs
    run_kubeconfig
    run_control_plane
    run_etcd
    run_mark_control_plane

    install_addons

    install_calico
}

main
