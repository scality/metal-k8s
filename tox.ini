[tox]
skipsdist = true
minversion = 3.4.0

[testenv]
whitelist_externals = bash
basepython = python3
skip_install = true
setenv =
    VIRTUALENV_NO_DOWNLOAD=1

[testenv:pip-compile]
description =
    Update the requirements.txt files.
skip_install = true
deps =
    pip==19.0.3
    pip-tools==3.6.0
setenv =
    CUSTOM_COMPILE_COMMAND = tox -e pip-compile
commands =
    bash -c 'pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/buildchain/requirements-$(uname -s).txt" \
        "{toxinidir}/buildchain/requirements.in"'
    pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/buildchain/requirements-dev.txt" \
        "{toxinidir}/buildchain/requirements-dev.in"
    pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/docs/requirements.txt" \
        "{toxinidir}/docs/requirements.in"
    pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/tests/requirements.txt" \
        "{toxinidir}/tests/requirements.in"
    pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/eve/buildplan/test-requirements.txt" \
        "{toxinidir}/eve/buildplan/test-requirements.in"
    pip-compile \
        --index --emit-trusted-host --annotate --generate-hashes \
        {posargs:--upgrade} \
        -o "{toxinidir}/eve/buildplan/requirements.txt" \
        "{toxinidir}/eve/buildplan/requirements.in"

[testenv:docs]
description = Render and lint documentation.
skip_install = true
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    doc8 docs/
    {toxinidir}/docs/build.cmd {posargs:html}
setenv =
    O=-j4 -n -W
    SPHINXOPTS=-j4 -n -W

[doc8]
ignore-path = docs/_build,docs/requirements.txt

[testenv:lint-python]
description =
    Lint Python files using pylint and mypy (buildchain-related files only for
    now).
deps =
    -r{toxinidir}/buildchain/requirements-{env:OSTYPE}.txt
    -r{toxinidir}/buildchain/requirements-dev.txt
commands =
    pylint        buildchain/dodo.py buildchain/buildchain
    mypy --strict buildchain/dodo.py buildchain/buildchain

[testenv:lint-shell]
description =
    Lint Shell scripts using shellcheck.
whitelist_externals =
    {[testenv]whitelist_externals}
    shellcheck
commands =
    bash -c "shellcheck $(git ls-files | grep -P '\.sh$')"
    bash -c "shellcheck $(git ls-files | grep -P '\.sh\.in$')"

[testenv:lint-yaml]
description =
    Lint Salt YAML files using yamllint.
deps =
    yamllint==1.15.0
commands =
    bash -c "yamllint salt"

[testenv:tests]
description =
    Run tests suite remotely (uses local Vagrant configuration by default).
deps =
    -r{toxinidir}/tests/requirements.txt
passenv =
    SSH_CONFIG_FILE
    TEST_HOSTS_LIST
    ISO_MOUNTPOINT
setenv =
    VAGRANT_CWD={toxinidir}
commands_pre =
    - bash -c "vagrant ssh-config > {envdir}/vagrant_ssh_config"
commands =
    pytest \
         --ssh-config={env:SSH_CONFIG_FILE:{envdir}/vagrant_ssh_config} \
         --hosts={env:TEST_HOSTS_LIST:bootstrap} \
         --iso-root={env:ISO_MOUNTPOINT:/vagrant/_build/root} \
         {posargs:-m local} tests

[testenv:tests-local]
description =
    Run tests suite on the bootstrap node of an installation.
deps = {[testenv:tests]deps}
passenv =
    ISO_MOUNTPOINT
commands =
    pytest \
        --iso-root={env:ISO_MOUNTPOINT:_build/root} \
        {posargs:-m local} tests

[testenv:generate-buildplan]
description =
    Generate buildplan into "eve/main.yml".
deps =
    -r{toxinidir}/eve/buildplan/requirements.txt
commands =
    bash -c \
        'python {toxinidir}/eve/buildplan/main.py > {toxinidir}/eve/main.yml'

[testenv:test-buildplan]
description =
    Run unit tests for the buildplan generation tooling.
deps =
    {[testenv:generate-buildplan]deps}
    -r{toxinidir}/eve/buildplan/test-requirements.txt
commands =
    pytest \
        --cov eve/buildplan/buildplan \
        --cov-report term-missing:skip-covered \
        --cov-fail-under 100 \
        {posargs} eve/buildplan

[pytest]
markers =
    ci: tag a BDD feature as part of CI test suite
    install: tag a BDD feature as an installation scenario
    local: tag a BDD feature as part of local test suite
    multinodes: tag a BDD feature requiring more than one node to run
    post: tag a BDD feature as a post-installation test
    slow: tag a BDD feature as a long running test
    ui: tag a BDD feature as related to MetalK8s UI
    salt: tag a BDD feature as related to Salt operations
    monitoring: tag a BDD feature as related to monitoring
    ingress: tag a BDD feature as related to ingress
filterwarnings =
    ignore:encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.:UserWarning
    ignore:Support for unsafe construction of public numbers from encoded data will be removed in a future version. Please use EllipticCurvePublicKey.from_encoded_point:UserWarning
